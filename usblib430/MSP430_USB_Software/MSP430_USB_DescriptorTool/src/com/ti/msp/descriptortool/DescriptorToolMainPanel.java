/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ti.msp.descriptortool;

import com.ti.msp.common.StaticInfo;
import com.ti.msp.descriptortool.USB.USBDeviceConfig;
import com.ti.msp.descriptortool.USB.USBModuleConfiguration;
import com.ti.msp.descriptortool.USBinterfaces.CDCInterface430;
import com.ti.msp.descriptortool.USBinterfaces.HIDInterface430;
import com.ti.msp.descriptortool.USBinterfaces.MSCInterface430;
import com.ti.msp.descriptortool.USBinterfaces.PHDCInterface430;
import com.ti.msp.descriptortool.mspConfig.MSP430Config;
import com.ti.msp.descriptortool.USB.USBDeviceConfigPanel;
import com.ti.msp.descriptortool.USB.USBModuleConfigurationPanel;
import com.ti.msp.descriptortool.USBinterfaces.CDCInterfacePanel430;
import com.ti.msp.descriptortool.USBinterfaces.HIDInterfacePanel430;
import com.ti.msp.descriptortool.USBinterfaces.MSCPanelInterfacePanel430;
import com.ti.msp.descriptortool.USBinterfaces.PHDCInterfacePanel430;
import com.ti.msp.descriptortool.codegen.CodeGeneration;
import com.ti.msp.descriptortool.mspConfig.MSP430ConfigPanel;
import java.awt.Desktop;
import java.awt.FlowLayout;
import java.io.File;
import java.net.URI;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author a0272979
 */
public class DescriptorToolMainPanel extends javax.swing.JPanel {
    JTree descToolTree;
    public String outputLoc;
    Boolean displayWarnign;
    DescriptorTool descTool;
    
    final private static int USB_CDC_INTERFACE =    0;
    final private static int USB_HID_INTERFACE =    1;
    final private static int USB_MSC_INTERFACE =    2;
    final private static int USB_PHDC_INTERFACE =   3;
    final private static int USB_ISO_INTERFACE =    4;

    /**
     * Creates new form DescriptorToolUpdated
     */
    public DescriptorToolMainPanel(JTree tree, String outputLoc, DescriptorTool descTool) {
        this.descToolTree = tree;
        this.outputLoc = outputLoc;
        this.descTool = descTool;
        initComponents();
        displayNodeProperties();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        addCDCButton = new javax.swing.JButton();
        addHIDButton = new javax.swing.JButton();
        addMSCButton = new javax.swing.JButton();
        addPHDCButton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        javax.swing.JTree jTree1 = descToolTree;
        updateConfigurationTree();
        configPanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        jLabel3 = new javax.swing.JLabel();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Code Generation"));

        jButton6.setFont(jButton6.getFont().deriveFont(jButton6.getFont().getStyle() | java.awt.Font.BOLD, jButton6.getFont().getSize()+5));
        jButton6.setText("Generate");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton6)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "USB Interfaces"));

        addCDCButton.setFont(addCDCButton.getFont().deriveFont(addCDCButton.getFont().getStyle() | java.awt.Font.BOLD, addCDCButton.getFont().getSize()+5));
        addCDCButton.setForeground(new java.awt.Color(222, 0, 0));
        addCDCButton.setText("<html>\n<p align=\"center\">Add CDC</p>\n<p align=\"center\"><font size=\"2\" color=\"black\">(Virtual COM Port)</font></p>");
        addCDCButton.setMaximumSize(new java.awt.Dimension(87, 29));
        addCDCButton.setMinimumSize(new java.awt.Dimension(87, 29));
        addCDCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCDCButtonActionPerformed(evt);
            }
        });

        addHIDButton.setFont(addHIDButton.getFont().deriveFont(addHIDButton.getFont().getStyle() | java.awt.Font.BOLD, addHIDButton.getFont().getSize()+5));
        addHIDButton.setForeground(new java.awt.Color(222, 0, 0));
        addHIDButton.setText("<html>\n<p align=\"center\">Add HID</p>\n<p align=\"center\"><font size=\"2\" color=\"black\">(Mice, Etc.)</font></p>");
        addHIDButton.setMaximumSize(new java.awt.Dimension(87, 29));
        addHIDButton.setMinimumSize(new java.awt.Dimension(87, 29));
        addHIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHIDButtonActionPerformed(evt);
            }
        });

        addMSCButton.setFont(addMSCButton.getFont().deriveFont(addMSCButton.getFont().getStyle() | java.awt.Font.BOLD, addMSCButton.getFont().getSize()+5));
        addMSCButton.setForeground(new java.awt.Color(222, 0, 0));
        addMSCButton.setText("<html>\n<p align=\"center\">Add MSC</p>\n<p align=\"center\"><font size=\"2\" color=\"black\">(Storage Volumes)</font></p>");
        addMSCButton.setMaximumSize(new java.awt.Dimension(87, 29));
        addMSCButton.setMinimumSize(new java.awt.Dimension(87, 29));
        addMSCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMSCButtonActionPerformed(evt);
            }
        });

        addPHDCButton.setFont(addPHDCButton.getFont().deriveFont(addPHDCButton.getFont().getStyle() | java.awt.Font.BOLD, addPHDCButton.getFont().getSize()+5));
        addPHDCButton.setForeground(new java.awt.Color(222, 0, 0));
        addPHDCButton.setText("<html>\n<p align=\"center\">Add PHDC</p>\n<p align=\"center\"><font size=\"2\" color=\"black\">(Continua Medical)</font></p>");
        addPHDCButton.setMaximumSize(new java.awt.Dimension(87, 29));
        addPHDCButton.setMinimumSize(new java.awt.Dimension(87, 29));
        addPHDCButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPHDCButtonActionPerformed(evt);
            }
        });

        jButton1.setFont(jButton1.getFont().deriveFont(jButton1.getFont().getStyle() | java.awt.Font.BOLD, jButton1.getFont().getSize()+5));
        jButton1.setText("Remove");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addCDCButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addHIDButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addMSCButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addPHDCButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addCDCButton, addHIDButton, addMSCButton, addPHDCButton, jButton1});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addCDCButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(addHIDButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(addMSCButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addPHDCButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 295, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addCDCButton, addHIDButton, addMSCButton, addPHDCButton});

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Navigation View"));

        jTree1.setModel(descToolTree.getModel());
        updateConfigurationTree();
        jTree1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                jTree1ValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                .addContainerGap())
        );

        configPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Configuration"));
        configPanel.setMinimumSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout configPanelLayout = new javax.swing.GroupLayout(configPanel);
        configPanel.setLayout(configPanelLayout);
        configPanelLayout.setHorizontalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 698, Short.MAX_VALUE)
        );
        configPanelLayout.setVerticalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Help Pane"));
        jPanel5.setMinimumSize(new java.awt.Dimension(500, 500));

        jEditorPane1.setContentType("text/html");
        try {
            jEditorPane1.setPage(new File("infoPanelText/Welcome/welcomeMessage.html").toURI().toURL());
        } catch (java.io.IOException e1) {
            e1.printStackTrace();
        }
        jEditorPane1.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                jEditorPane1HyperlinkUpdate(evt);
            }
        });
        jScrollPane3.setViewportView(jEditorPane1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 698, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel5Layout.createSequentialGroup()
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 282, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 196, Short.MAX_VALUE)))
        );

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/ti/msp/descriptortool/images/TI_platform_bar_black.png"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(configPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(configPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addHIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHIDButtonActionPerformed
        // Determine action based on validation Code
        if(getNumberOfInterface() > 6){
            displayInterfaceError(1);
        }else{
             addInterface(USB_HID_INTERFACE); 
        }
    }//GEN-LAST:event_addHIDButtonActionPerformed

    private void jTree1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_jTree1ValueChanged
        displayNodeProperties();
    }//GEN-LAST:event_jTree1ValueChanged

    private void addCDCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCDCButtonActionPerformed
        // Determine action based on validation Code
        if(getNumberOfInterface() > 5){
            displayInterfaceError(1); 
        }else{
            addInterface(USB_CDC_INTERFACE);
        }
    }//GEN-LAST:event_addCDCButtonActionPerformed

    private void addMSCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMSCButtonActionPerformed
        // Determine action based on validation Code
        if(getNumberOfMSCInterfaces()<1){
            if(getNumberOfInterface() > 6){ 
                displayInterfaceError(1);
            }else{
                addInterface(USB_MSC_INTERFACE);
            }
        }else{
            displayInterfaceError(2);
        }
    }//GEN-LAST:event_addMSCButtonActionPerformed

    private void addPHDCButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPHDCButtonActionPerformed
        // Determine action based on validation Code
        if(getNumberOfPHDCInterfaces()<1){
            if(getNumberOfInterface() > 5){
                displayInterfaceError(1);
            }else{
                String link ="http://ti.com/ww/en/embedded/medical_usb_stack/index.shtml";
                Object[] options = {"OK",
                    "Open link"};
                int n = JOptionPane.showOptionDialog(this,
                    "<html><p>The PHDC interface is intended to be used as "
                        + "part of the Continua medical stack,</p> "
                        + "<p>including layers based on ISO/IEEE 11073-20601 "
                        + "and -10407. To learn more, visit:</p><br/>"
                        + "<p>"
                        + link 
                        + "</p><br/>",
                    "Information",
                    JOptionPane.YES_NO_OPTION,
                    JOptionPane.INFORMATION_MESSAGE,
                    null,     
                    options,
                    options[0]);
                
                if(n==JOptionPane.NO_OPTION){
                    StaticInfo.debug("Attempting to open link: " + link);
                    Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
                    if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
                        try {
                            desktop.browse(new URI(link));
                        } catch (Exception e) {
                            StaticInfo.error(e.getLocalizedMessage());
                            StaticInfo.debug(e.getLocalizedMessage());
                        }
                    }
                }
                addInterface(USB_PHDC_INTERFACE);
                
            }
        }else{
            displayInterfaceError(3);
        }
    }//GEN-LAST:event_addPHDCButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        removeInterface();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
//        final JFileChooser fc = new JFileChooser();
//        fc.setCurrentDirectory(new File(outputLoc));
//        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
//        int returnVal = fc.showSaveDialog(this);
//        if (returnVal == JFileChooser.APPROVE_OPTION) {
//            outputLoc = fc.getSelectedFile().getAbsolutePath();
//            new CodeGeneration(fc.getSelectedFile().getAbsolutePath(),
//                false, descToolTree).generate();
//        }
        if(getNumberOfInterface()>0){
            if(validatePID()){
                if(validateVID()){
                    CodeGeneration codeGen = new CodeGeneration(outputLoc,descToolTree,this, descTool);
                }else{
                    StaticInfo.error(this, "The VID field (in the USB Device view) is invalid; please enter a valid VID there before\n" +
                        "generating output.\n\n" +
                        "(For instructions, click on the VID field and see the Help Pane text.)");
                
                descToolTree.setSelectionRow(1);
                }
            }else{
                StaticInfo.error(this, "The PID field (in the USB Device view) is invalid; please enter a valid PID there before\n" +
                        "generating output.\n\n" +
                        "(For instructions, click on the PID field and see the Help Pane text.)");
                
                descToolTree.setSelectionRow(1);
            }
        }else{
            StaticInfo.error(this, "The device contains no interfaces; please add an interface before proceeding.");
        }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jEditorPane1HyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {//GEN-FIRST:event_jEditorPane1HyperlinkUpdate

    }//GEN-LAST:event_jEditorPane1HyperlinkUpdate

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCDCButton;
    private javax.swing.JButton addHIDButton;
    private javax.swing.JButton addMSCButton;
    private javax.swing.JButton addPHDCButton;
    private javax.swing.JPanel configPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

    private void displayNodeProperties() {
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                       descToolTree.getLastSelectedPathComponent();
        if (node == null)
        //Nothing is selected.     
        return;

        removeConfigurationPanel();
        
        //Determine type of node that was selected
        Object nodeInfo = node.getUserObject();
        if(nodeInfo.getClass()== MSCInterface430.class){
            configPanel.add(new MSCPanelInterfacePanel430(jEditorPane1,(MSCInterface430)nodeInfo));
        }else if(nodeInfo.getClass()== MSP430Config.class){
            configPanel.add(new MSP430ConfigPanel(this,jEditorPane1,(MSP430Config)(nodeInfo)));
        }else if(nodeInfo.getClass()== USBDeviceConfig.class){
            configPanel.add(new USBDeviceConfigPanel(jEditorPane1,(USBDeviceConfig)(nodeInfo)));
        }else if(nodeInfo.getClass()== USBModuleConfiguration.class){
            configPanel.add(new USBModuleConfigurationPanel(jEditorPane1,(USBModuleConfiguration)(nodeInfo)));
        }else if(nodeInfo.getClass()== CDCInterface430.class){
            configPanel.add(new CDCInterfacePanel430(jEditorPane1,(CDCInterface430)(nodeInfo)));
        }else if(nodeInfo.getClass()== PHDCInterface430.class){
            configPanel.add(new PHDCInterfacePanel430(jEditorPane1,(PHDCInterface430)(nodeInfo)));
        }else if(nodeInfo.getClass()== HIDInterface430.class){
            configPanel.add(new HIDInterfacePanel430(jEditorPane1,(HIDInterface430)(nodeInfo)));
        }
        repaintConfigurationPanel();
    }
    
    private void removeConfigurationPanel() {
        configPanel.removeAll();
        configPanel.setLayout(new FlowLayout(FlowLayout.LEADING));
    }
    
    private void repaintConfigurationPanel() {
        configPanel.revalidate();
        configPanel.repaint();
    }
    
    private void updateConfigurationTree() {
        descToolTree.updateUI();
        descToolTree.expandRow(0);
        descToolTree.expandRow(1);
        descToolTree.expandRow(2);
        descToolTree.expandRow(3);

        // Automatically selects the last node available in descToolTree
        descToolTree.setSelectionInterval(descToolTree.getRowCount()-1, 
        descToolTree.getRowCount());
    }
    
        private int getNumberOfInterface() {
        DefaultMutableTreeNode node = getConfigurationLevel();
        
        int numIntf=0;
        for(int i=0; i<node.getChildCount();i++){
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);
            if(childNode.getUserObject() instanceof CDCInterface430){
                numIntf +=2;
            }else if(childNode.getUserObject() instanceof HIDInterface430){
                numIntf +=1;
            }else if(childNode.getUserObject() instanceof MSCInterface430){
                numIntf +=1;
            }else if(childNode.getUserObject() instanceof PHDCInterface430){
                numIntf +=2;
            }
        }
        
        return numIntf;
        
    }
        
    private DefaultMutableTreeNode getConfigurationLevel() {
        // Gets msp rootNode
        DefaultMutableTreeNode mspNode = (DefaultMutableTreeNode)
                 (descToolTree.getModel().getRoot());
      
        //Gets "configuration" childNode
        return (DefaultMutableTreeNode) mspNode.getChildAt(0).getChildAt(0);
    }
        
    private void displayInterfaceError(int errorCode) {
        switch(errorCode){
            case 1:
                StaticInfo.error(this,"No more USB endpoints available for adding another interface!");
                StaticInfo.debug("No more USB endpoints available for adding another interface!");
                break;
            case 2:
                StaticInfo.error(this,"Device can have only one MSC interface.");
                StaticInfo.debug("Device can have only one MSC interface.");
                break;
            case 3:
                StaticInfo.error(this,"Device can have only one PHDC interface.");
                StaticInfo.debug("Device can have only one PHDC interface.");
                break;
            default:
                StaticInfo.error(this,"NFI");
                StaticInfo.debug("NFI");
                break;
        }
        
    }
    
    private void addInterface(int interfType) {
        // Gets msp rootNode
        DefaultMutableTreeNode mspNode = (DefaultMutableTreeNode)
                 (descToolTree.getModel().getRoot());
      
        //Gets "configuration" childNode
        DefaultMutableTreeNode configNode =(DefaultMutableTreeNode) 
                mspNode.getChildAt(0).getChildAt(0);
      
        DefaultMutableTreeNode interfaceNode = null;
        
        
        // Determine type of interface to be added
        switch(interfType){
            case USB_CDC_INTERFACE:
                interfaceNode = new DefaultMutableTreeNode(
                        new CDCInterface430());
                StaticInfo.debug("Adding CDC interface");
                break;
            case USB_HID_INTERFACE:
                interfaceNode = new DefaultMutableTreeNode(
                        new HIDInterface430());
                StaticInfo.debug("Adding HID interface");
                break;
            case USB_MSC_INTERFACE:
                interfaceNode = new DefaultMutableTreeNode(
                        new MSCInterface430());
                StaticInfo.debug("Adding MSC interface");
                break;
            case USB_PHDC_INTERFACE:
                interfaceNode = new DefaultMutableTreeNode(
                        new PHDCInterface430());
                StaticInfo.debug("Adding PHDC interface");
                break;
            default:
                StaticInfo.error("Invalid interface");
                return;
        }
       
        
        // Add interface Node to current configuration
        configNode.add(interfaceNode);
        if(((getNumberOfHIDInterfaces()>0 || getNumberOfMSCInterfaces()>0 || getNumberOfPHDCInterfaces() >0) && (getNumberOfCDCInterfaces()>0)) ||
                (getNumberOfCDCInterfaces() > 1)){
            StaticInfo.message(this, JOptionPane.WARNING_MESSAGE, 
                    "Please note that the MacOS can't recognize a composite USB device containing a CDC \n" +
                            "interface.", 
                    "Warning");
            
        }
        sortConfigNode(configNode);
        updateConfigurationTree();
    }
    
    private int getNumberOfHIDInterfaces() {
        DefaultMutableTreeNode node = getConfigurationLevel();
        
        int numIntf=0;
        for(int i=0; i<node.getChildCount();i++){
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);
            if(childNode.getUserObject() instanceof HIDInterface430){
                numIntf ++;
            }
        }
        
        return numIntf;
        
    }
    
    private int getNumberOfCDCInterfaces() {
        DefaultMutableTreeNode node = getConfigurationLevel();
        
        int numIntf=0;
        for(int i=0; i<node.getChildCount();i++){
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);
            if(childNode.getUserObject() instanceof CDCInterface430){
                numIntf ++;
            }
        }
        
        return numIntf;
        
    }
    
    private int getNumberOfMSCInterfaces() {
        DefaultMutableTreeNode node = getConfigurationLevel();
        
        int numIntf=0;
        for(int i=0; i<node.getChildCount();i++){
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);
            if(childNode.getUserObject() instanceof MSCInterface430){
                numIntf ++;
            }
        }
        
        return numIntf;
        
    }
    
    private int getNumberOfPHDCInterfaces() {
        DefaultMutableTreeNode node = getConfigurationLevel();
        
        int numIntf=0;
        for(int i=0; i<node.getChildCount();i++){
            DefaultMutableTreeNode childNode = (DefaultMutableTreeNode) node.getChildAt(i);
            if(childNode.getUserObject() instanceof PHDCInterface430){
                numIntf ++;
            }
        }
        
        return numIntf;
        
    }
    
    /**
     * Removes currently selected interface configuration
     */
    private void removeInterface(){
        // Determine which interface will be removed
        StaticInfo.debug("Removing Interface button pressed");
        
        // Determine if selected node is a valid interface to be removed
        DefaultMutableTreeNode node = (DefaultMutableTreeNode)
                       descToolTree.getLastSelectedPathComponent();
        
        // Verify a node was selected for removal
        if(node == null){
            StaticInfo.message(this, JOptionPane.INFORMATION_MESSAGE,
                    "Select an interface to delete.","Delete Interface");
        }
         
        Object nodeInfo = node.getUserObject();
        Class classType = nodeInfo.getClass();
        if((classType == MSP430Config.class) || (classType == USBModuleConfiguration.class) ||
                (classType == USBDeviceConfig.class)){
            StaticInfo.error(this, "Select a valid USB Interface.");
            return;
        }
        
        String interfaceName = getInterfaceName(node, classType);
        
        int response = confirmAction("Confirm Deleition", 
                "Are you sure you want to delete the following interface?\n\n"+
                interfaceName);
        
        if(response == JOptionPane.OK_OPTION){
            DefaultTreeModel model = (DefaultTreeModel)descToolTree.getModel();
            model.removeNodeFromParent(node);
            removeConfigurationPanel();
            //Clear content of InfoTextPanel
            jEditorPane1.removeAll();
            jEditorPane1.setText("");
            StaticInfo.debug("Removing Interface: " + interfaceName);
        }else{
            StaticInfo.debug("Removing Interface cancelled");
        }
        
        sortConfigNode(getConfigurationLevel());
        updateConfigurationTree();

        
    }
    
    private String getInterfaceName(DefaultMutableTreeNode node, Class classType) {
        
        if(classType == CDCInterface430.class){
            CDCInterface430 temp = (CDCInterface430)(node.getUserObject());
            return temp.toString();
        }else if(classType == HIDInterface430.class){
            HIDInterface430 temp = (HIDInterface430)(node.getUserObject());
            return temp.toString();
        }else if(classType == MSCInterface430.class){
            MSCInterface430 temp = (MSCInterface430)(node.getUserObject());
            return temp.toString();
        }else if(classType == PHDCInterface430.class){
            PHDCInterface430 temp = (PHDCInterface430)(node.getUserObject());
            return temp.toString();
        }
        
        return null;
    } 
    
    private int confirmAction(String tittle, String message) {
        return JOptionPane.showConfirmDialog(this, message,tittle,JOptionPane.OK_CANCEL_OPTION);
    }

    private void sortConfigNode(DefaultMutableTreeNode configNode) {
        ArrayList<DefaultMutableTreeNode> mscIntf = new ArrayList<DefaultMutableTreeNode>();
        ArrayList<DefaultMutableTreeNode> cdcIntf = new ArrayList<DefaultMutableTreeNode>();
        ArrayList<DefaultMutableTreeNode> hidIntf = new ArrayList<DefaultMutableTreeNode>();
        ArrayList<DefaultMutableTreeNode> phdcIntf = new ArrayList<DefaultMutableTreeNode>();
        
        for(int i=0; i<configNode.getChildCount();i++){
            DefaultMutableTreeNode node  = (DefaultMutableTreeNode)configNode.getChildAt(i);
            
            Object nodeInfo = node.getUserObject();
            Class classType = nodeInfo.getClass();
            
            if(classType == CDCInterface430.class){
                cdcIntf.add(node);
            }else if(classType == HIDInterface430.class){
                hidIntf.add(node);
            }else if(classType == MSCInterface430.class){
                mscIntf.add(node);
            }else if(classType == PHDCInterface430.class){
                phdcIntf.add(node);
            } 
        }
        configNode.removeAllChildren();
        int interfNum =0;
        
        //Add nodes
        if(mscIntf.isEmpty()==false){
            DefaultMutableTreeNode node = mscIntf.get(0);
            MSCInterface430 intf = (MSCInterface430) node.getUserObject();
            intf.setIntfNum(interfNum++);
            configNode.add(node);
        }
        if(cdcIntf.isEmpty()==false){
            for(DefaultMutableTreeNode node: cdcIntf){
                CDCInterface430 intf = (CDCInterface430) node.getUserObject();
                intf.setIntfNum(interfNum++);
                configNode.add(node);
            }   
        }
        if(hidIntf.isEmpty()==false){
            for(DefaultMutableTreeNode node: hidIntf){
                HIDInterface430 intf = (HIDInterface430) node.getUserObject();
                intf.setInterfNum(interfNum++);
                configNode.add(node);
            }
            
        }
        if(phdcIntf.isEmpty()==false){
            DefaultMutableTreeNode node = phdcIntf.get(0);
            PHDCInterface430 intf = (PHDCInterface430) node.getUserObject();
            intf.setInterfNum(interfNum++);
            configNode.add(node);
        }  
    }
    
    public void updateConfigurationTree(JTree tree){
        descToolTree.setModel(tree.getModel());
        updateConfigurationTree();
    }
    
    public void updateOutputLocation (String outputDir){
        this.outputLoc = outputDir;
    }

    private boolean validatePID() {
        // Gets msp rootNode
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)
                 (descToolTree.getModel().getRoot());
      
        DefaultMutableTreeNode configNode =  (DefaultMutableTreeNode) root.getChildAt(0);
        
        USBDeviceConfig config = (USBDeviceConfig) configNode.getUserObject();
        
        String text = config.getpID();
        
        String lowerCase = text.toLowerCase();
        int value;
        try{
            if(text.toLowerCase().contains("0x")){
                lowerCase = lowerCase.replace("0x", "");
                value = Integer.parseInt(lowerCase,16);         
            }else{
                value = Integer.parseInt(lowerCase,10);
            }
        }catch (NumberFormatException e){
            StaticInfo.debug(e.getLocalizedMessage());
            return false;
        }
        
        if((value >= 0x0000) && (value <= 0xFFFF)){
                return true;
        }
        return false;
    }

    private boolean validateVID() {
        // Gets msp rootNode
        DefaultMutableTreeNode root = (DefaultMutableTreeNode)
                 (descToolTree.getModel().getRoot());
      
        DefaultMutableTreeNode configNode =  (DefaultMutableTreeNode) root.getChildAt(0);
        
        USBDeviceConfig config = (USBDeviceConfig) configNode.getUserObject();
        
        String text = config.getvID();
        
        String lowerCase = text.toLowerCase();
        int value;
        try{
            if(text.toLowerCase().contains("0x")){
                lowerCase = lowerCase.replace("0x", "");
                value = Integer.parseInt(lowerCase,16);         
            }else{
                value = Integer.parseInt(lowerCase,10);
            }
        }catch (NumberFormatException e){
            StaticInfo.debug(e.getLocalizedMessage());
            return false;
        }
        
        if((value >= 0x0000) && (value <= 0xFFFF)){
                return true;
        }
        return false;
    }

    
}


//Released_Version_5_20_06_02
