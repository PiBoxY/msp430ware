/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ti.msp.descriptortool.USBinterfaces;

import com.ti.msp.common.StaticInfo;
import java.awt.Component;
import java.awt.event.FocusEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;

/**
 *
 * @author a0272979
 */
public class MSCPanelInterfacePanel430 extends javax.swing.JPanel {
    JEditorPane editorPane;
    MSCInterface430 mscInterface;
    

    /**
     * Creates new form MSCPanelInterfacePanel430
     */
    public MSCPanelInterfacePanel430(JEditorPane editorPane, MSCInterface430 mscInterface) {
        this.editorPane = editorPane;
        this.mscInterface = mscInterface;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox();
        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder()), "MSC Interface Configuration"));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Common Interface Options"));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel1MouseEntered(evt);
            }
        });

        jLabel1.setText("Interface Number (intNum)");

        jTextField1.setText(Integer.toString(mscInterface.getIntfNum()));
        jTextField1.setEnabled(false);

        jLabel2.setText("Interface String:");

        jTextField2.setText(mscInterface.getInterfString());
        jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField2MouseClicked(evt);
            }
        });
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTextField2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });
        jTextField2.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jTextField2CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTextField1.getAccessibleContext().setAccessibleName("MSCInterfaceNumTextField");
        jTextField2.getAccessibleContext().setAccessibleName("Interface String");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Mass Storage Device Parameters"));

        jLabel3.setText("Number of LUNs: ");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4" }));
        jComboBox1.setSelectedIndex(mscInterface.getNumOfLuns()-1);
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBox1MouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboBox1MousePressed(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jComboBox1FocusGained(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Mass Storage Mode"));

        jRadioButton1.setSelected(mscInterface.isHardDriveMode());
        jRadioButton1.setText("Hard Drive Mode");
        jRadioButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jRadioButton1MouseEntered(evt);
            }
        });
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        jRadioButton2.setSelected(mscInterface.isCdRomMode());
        jRadioButton2.setText("CD-ROM Mode");
        jRadioButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jRadioButton2MouseEntered(evt);
            }
        });
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton1)
                    .addComponent(jRadioButton2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jRadioButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jRadioButton2)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jComboBox1.getAccessibleContext().setAccessibleName("Numbre of LUNs");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Logical Unit Configuration"));
        jPanel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel4MouseEntered(evt);
            }
        });

        jLabel4.setText("Logical Unit Number: ");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0" }));
        jComboBox2.setSelectedIndex(-1);
        setLUNComboBoxModel(mscInterface.getNumOfLuns());
        jComboBox2.setSelectedIndex(mscInterface.getNumOfLuns()-1);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jCheckBox1.setSelected(mscInterface.getLunMap().get(0).isRemovableMedia());
        jCheckBox1.setText("Removable Media");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "T10 Strings"));
        jPanel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel5MouseEntered(evt);
            }
        });

        jLabel5.setText("Vendor:");

        jLabel6.setText("Product:");

        jLabel7.setText("Revision:");

        jTextField3.setText(mscInterface.getLunMap().get(0).getT10Vendor());

        jTextField4.setText(mscInterface.getLunMap().get(0).getT10Product());

        jTextField5.setText(mscInterface.getLunMap().get(0).getT10Revision());

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField5))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4)
                            .addComponent(jTextField3))))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jCheckBox2.setSelected(mscInterface.getLunMap().get(0).isUseUSBVidinfo());
        jCheckBox2.setText("Use USB Device's VID/PID/Rev for T10 Strings");
        jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jCheckBox1))
                        .addGap(0, 7, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBox1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBox2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void jPanel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel1MouseEntered
        updateEditorPane(evt);
    }//GEN-LAST:event_jPanel1MouseEntered

    private void jPanel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel4MouseEntered
        updateEditorPane(evt);
    }//GEN-LAST:event_jPanel4MouseEntered

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
        String text = jTextField2.getText();
        StaticInfo.debug(mscInterface.toString() + " Interface String updated: " + text );
        mscInterface.setInterfString(text);
    }//GEN-LAST:event_jTextField2FocusLost

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        StaticInfo.debug(mscInterface.toString() + " setting number of LUN to: " + jComboBox1.getSelectedItem());
        
        if((jRadioButton2.isSelected()) && (jComboBox1.getSelectedIndex() > 0)){
           StaticInfo.error("Multiple LUNs are not supported in CD-ROM mode.");
           jComboBox1.setSelectedIndex(0);
        }
        mscInterface.setNumOfLuns(jComboBox1.getSelectedIndex()+1);
        updateNumberOfLUN();
        jComboBox2.setSelectedIndex(0);
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        boolean state = jRadioButton1.isSelected();
        
        StaticInfo.debug(mscInterface.toString() + " setting hard drive mode: " + state);
        mscInterface.setHardDriveMode(state);
        StaticInfo.debug(mscInterface.toString() + " setting CD-ROM mode: " + !state);
        jRadioButton2.setSelected(!state);
        mscInterface.setCdRomMode(!state);
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        boolean state = jRadioButton2.isSelected();
        
        if(jComboBox1.getSelectedIndex()>0 && state){
            StaticInfo.error("Multiple LUNs are not supported in CD-ROM mode.");
            jRadioButton2.setSelected(false);
        }else{

            StaticInfo.debug(mscInterface.toString() + " setting CD-ROM mode: " + state);
            mscInterface.setCdRomMode(state);
            StaticInfo.debug(mscInterface.toString() + " setting hard drive mode: " + !state);
            jRadioButton1.setSelected(!state);
            mscInterface.setHardDriveMode(!state);
        }
        
        
        
        
             
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        displayLUNInfo();
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
        MSCInterface430.LogicalUnit lun = getCurrentLUN();
        lun.setUseUSBVidinfo(jCheckBox2.isSelected());
        updateT10StringField();
    }//GEN-LAST:event_jCheckBox2ActionPerformed

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        mscInterface.setInterfString(jTextField2.getText());
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        MSCInterface430.LogicalUnit lun = getCurrentLUN();
        lun.setRemovableMedia(jCheckBox1.isSelected());
        updateT10StringField();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jPanel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel5MouseEntered
        updateEditorPane(evt);
    }//GEN-LAST:event_jPanel5MouseEntered

    private void jTextField2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusGained

    }//GEN-LAST:event_jTextField2FocusGained

    private void jTextField2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField2MouseClicked
        updateEditorPaneTextField(evt);
    }//GEN-LAST:event_jTextField2MouseClicked

    private void jTextField2CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextField2CaretPositionChanged

    }//GEN-LAST:event_jTextField2CaretPositionChanged

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
        updateEditorPaneCombo(evt);
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jComboBox1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MousePressed
        updateEditorPaneCombo(evt);
    }//GEN-LAST:event_jComboBox1MousePressed

    private void jComboBox1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseEntered
        updateEditorPaneCombo(evt);
    }//GEN-LAST:event_jComboBox1MouseEntered

    private void jComboBox1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jComboBox1FocusGained
        updateEditorPaneComboFocus(evt);
    }//GEN-LAST:event_jComboBox1FocusGained

    private void jRadioButton1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButton1MouseEntered
        updateEditorPaneRadioButton(evt);
    }//GEN-LAST:event_jRadioButton1MouseEntered

    private void jRadioButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRadioButton2MouseEntered
        updateEditorPaneRadioButton(evt);
    }//GEN-LAST:event_jRadioButton2MouseEntered

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables

    private void updateEditorPane(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JPanel sourcePanel = (JPanel) evt.getSource();
        String accessName = sourcePanel.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Common Interface Options")){
            htmlFileToDisplay = "infoPanelText/MSCInterface/intfNumMSC.html";
        }else if(accessName.contentEquals("Logical Unit Configuration")){
            htmlFileToDisplay = "infoPanelText/MSCInterface/logicalUnitConfig.html";
        }else if(accessName.contentEquals("T10 Strings")){
            htmlFileToDisplay = "infoPanelText/MSCInterface/t10String.html";
        }else {
            return;
        }
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
        
        
        
        
    }
    
    private void updateEditorPaneTextField(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JTextField sourcePanel = (JTextField) evt.getSource();
        String accessName = sourcePanel.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Interface String")){
            htmlFileToDisplay = "infoPanelText/MSCInterface/intfString.html";
        }else {
            return;
        }
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
        
        
        
        
    }
    

    private void setLUNComboBoxModel(int numOfLUN) {
        ArrayList<String> lUNNum = new ArrayList<String>();
        
        for(int i=0; i<(numOfLUN); i++){
            lUNNum.add(String.valueOf(i+1));
        }
        
        DefaultComboBoxModel model = new DefaultComboBoxModel(lUNNum.toArray());
        jComboBox2.setModel(model);
    }

    private void displayLUNInfo() {
        MSCInterface430.LogicalUnit lun = mscInterface.getLunMap().get(jComboBox2.getSelectedIndex());
        
        jCheckBox1.setSelected(lun.isRemovableMedia());
        jTextField3.setText(lun.getT10Vendor());
        jTextField4.setText(lun.getT10Product());
        jTextField5.setText(lun.getT10Revision());
        jCheckBox2.setSelected(lun.isUseUSBVidinfo()); 
        
        updateT10StringField();
    }

    private void updateT10StringField() {
        boolean state = ! jCheckBox2.isSelected();
        
        for(Component comp :jPanel5.getComponents()){
            comp.setEnabled(state);
        }
        
        
    }

    private void updateNumberOfLUN() {
        HashMap<Integer, MSCInterface430.LogicalUnit> map = mscInterface.getLunMap();
        
        int numLun = mscInterface.getNumOfLuns();
        
        if(map.keySet().size() > numLun){
            while(map.keySet().size()>numLun){
                map.remove(map.keySet().size()-1);
            }
        }else if(map.keySet().size() < numLun){
            while(map.keySet().size() < numLun){
                map.put(map.keySet().size(), mscInterface.new LogicalUnit(map.keySet().size()));
            }
        }
        
        setLUNComboBoxModel(mscInterface.getNumOfLuns());
        
        
    }

    private MSCInterface430.LogicalUnit getCurrentLUN() {
        return mscInterface.getLunMap().get(jComboBox2.getSelectedIndex());
    }

    private void updateEditorPaneCombo(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JComboBox sourcePanel = (JComboBox) evt.getSource();
        String accessName = sourcePanel.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Numbre of LUNs")){
            htmlFileToDisplay = "infoPanelText/MSCInterface/numOfLuns.html";
        }else {
            return;
        }
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
    }
    
    private void updateEditorPaneComboFocus(FocusEvent evt) {
        // Determine Panel which generated the MouseEvent
        JComboBox sourcePanel = (JComboBox) evt.getSource();
        String accessName = sourcePanel.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Numbre of LUNs")){
            htmlFileToDisplay = "infoPanelText/MSCInterface/numOfLuns.html";
        }else {
            return;
        }
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
    }
    
    private void updateEditorPaneRadioButton(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JRadioButton sourcePanel = (JRadioButton) evt.getSource();
        String accessName = sourcePanel.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Hard Drive Mode")){
            htmlFileToDisplay = "infoPanelText/MSCInterface/storageDevParam.html";
        }else if(accessName.contentEquals("CD-ROM Mode")){
            htmlFileToDisplay = "infoPanelText/MSCInterface/storageDevParam.html";
        }else {
            return;
        }
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
    }
}
//Released_Version_5_20_06_02
