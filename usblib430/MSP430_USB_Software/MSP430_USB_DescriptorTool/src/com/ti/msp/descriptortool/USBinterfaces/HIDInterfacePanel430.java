/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ti.msp.descriptortool.USBinterfaces;

import com.ti.msp.common.StaticInfo;
import java.awt.event.InputMethodEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;

/**
 *
 * @author a0272979
 */
public class HIDInterfacePanel430 extends javax.swing.JPanel {
    JEditorPane editorPane;
    HIDInterface430 hIDInterface;


    /**
     * Creates new form HIDInterfacePanel430
     */
    public HIDInterfacePanel430(JEditorPane editorPane, HIDInterface430 hIDInterface) {
        this.editorPane = editorPane;
        this.hIDInterface = hIDInterface;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "HID Interface Configuration "));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "HID Parameters"));

        jLabel4.setText("HID Report Type:");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Datapipe", "Keyboard", "Mouse", "Custom" }));
        jComboBox1.setSelectedIndex(hIDInterface.getHidReportType());
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jComboBox1MouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jComboBox1MousePressed(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jPanel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel3MouseEntered(evt);
            }
        });

        jLabel3.setText("Polling Interval (ms):");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(hIDInterface.getPollingInterv(), 1, 255, 1));
        jSpinner1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jSpinner1MouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jSpinner1MousePressed(evt);
            }
        });
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        jSpinner1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                jSpinner1CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jSpinner1.getAccessibleContext().setAccessibleName("Polling Interval");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jComboBox1.getAccessibleContext().setAccessibleName("HID Report Type");
        jPanel3.getAccessibleContext().setAccessibleName("Polling Panel");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Common Interface Options"));
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jPanel2MouseEntered(evt);
            }
        });

        jLabel1.setText("Interface Number (intNum):");

        jLabel2.setText("Interface String:");

        jTextField1.setEditable(false);
        jTextField1.setText(String.valueOf(hIDInterface.getInterfNum()));
        jTextField1.setEnabled(false);

        jTextField2.setText(hIDInterface.getInterfString());
        jTextField2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField2MouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextField2MousePressed(evt);
            }
        });
        jTextField2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextField2FocusLost(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jTextField2.getAccessibleContext().setAccessibleName("Interface String");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextField2FocusLost
        String text = jTextField2.getText();
        StaticInfo.debug(hIDInterface.toString() + ": " + text );
        hIDInterface.setInterfString(text);
    }//GEN-LAST:event_jTextField2FocusLost

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        hIDInterface.setPollingInterv(Integer.parseInt(jSpinner1.getValue().toString()));
    }//GEN-LAST:event_jSpinner1StateChanged

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        StaticInfo.debug(hIDInterface.toString() + "setting HID report Type to: " + jComboBox1.getSelectedItem());
        if(jComboBox1.getSelectedIndex()==3){
            HIDCustomReportDialog dialog = new HIDCustomReportDialog(
                    (JFrame) SwingUtilities.getWindowAncestor(this.getRootPane()),
                    true, 
                    hIDInterface);
            dialog.setVisible(true);
        }else{
            hIDInterface.setHidReportType(jComboBox1.getSelectedIndex());
        }
        
        updatePollingInterval();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        hIDInterface.setInterfString(jTextField2.getText());
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jPanel2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseEntered
        updateEditorPane(evt);
    }//GEN-LAST:event_jPanel2MouseEntered

    private void jTextField2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField2MouseClicked
        updateEditorPaneTextField(evt);
    }//GEN-LAST:event_jTextField2MouseClicked

    private void jTextField2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField2MousePressed
        updateEditorPaneTextField(evt);
    }//GEN-LAST:event_jTextField2MousePressed

    private void jSpinner1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSpinner1MouseEntered

    }//GEN-LAST:event_jSpinner1MouseEntered

    private void jSpinner1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jSpinner1MousePressed

    }//GEN-LAST:event_jSpinner1MousePressed

    private void jSpinner1CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jSpinner1CaretPositionChanged

    }//GEN-LAST:event_jSpinner1CaretPositionChanged

    private void jPanel3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel3MouseEntered
        updateEditorPane(evt);
    }//GEN-LAST:event_jPanel3MouseEntered

    private void jComboBox1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseEntered
        updateEditorPaneCombo(evt);
    }//GEN-LAST:event_jComboBox1MouseEntered

    private void jComboBox1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MousePressed
        updateEditorPaneCombo(evt);
    }//GEN-LAST:event_jComboBox1MousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
    
    private void updateEditorPane(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JPanel source = (JPanel) evt.getSource();
        String accessName = source.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Common Interface Options")){
            htmlFileToDisplay = "infoPanelText/HIDInterface/interfNumHID.html";
        }else if(accessName.contentEquals("Polling Panel")){
            htmlFileToDisplay = "infoPanelText/HIDInterface/PollingInterval.html";
        }else {
            return;
        }
        
        
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
        
        
        
        
    }

    private void updatePollingInterval() {
        int selection = jComboBox1.getSelectedIndex();
        
        switch(selection){
            case 0:
                jSpinner1.getModel().setValue(1);
                hIDInterface.setPollingInterv(1);
                break;
            case 1:
                jSpinner1.getModel().setValue(15);
                hIDInterface.setPollingInterv(15);
                break;
            case 2:
                jSpinner1.getModel().setValue(20);
                hIDInterface.setPollingInterv(20);
                break;
            case 3:
                jSpinner1.getModel().setValue(1);
                hIDInterface.setPollingInterv(1);
        }
        
    }
    
    private void updateEditorPaneTextField(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JTextField sourcePanel = (JTextField) evt.getSource();
        String accessName = sourcePanel.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("Interface String")){
            htmlFileToDisplay = "infoPanelText/HIDInterface/intfString.html";
        }else {
            return;
        }
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
        
    }
    
    private void updateEditorPaneCombo(MouseEvent evt) {
        // Determine Panel which generated the MouseEvent
        JComboBox sourcePanel = (JComboBox) evt.getSource();
        String accessName = sourcePanel.getAccessibleContext().getAccessibleName();
        String htmlFileToDisplay;
        
        // Determine File to be displayed in InfoPanel
        if(accessName.contentEquals("HID Report Type")){
            htmlFileToDisplay = "infoPanelText/HIDInterface/HIDReportType.html";
        }else {
            return;
        }
        
        // If Panel has valid HTML description remove current content in 
        // infoPane
        editorPane.removeAll();
        
        // Display page in infoPane 
        try {
            URL url = new File(htmlFileToDisplay).toURI()
                    .toURL();
            editorPane.setPage(url);
        } catch (MalformedURLException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MSCPanelInterfacePanel430.class.getName()).log(
                    Level.SEVERE, null, ex);
        }
    }
    
}
//Released_Version_5_20_06_02
