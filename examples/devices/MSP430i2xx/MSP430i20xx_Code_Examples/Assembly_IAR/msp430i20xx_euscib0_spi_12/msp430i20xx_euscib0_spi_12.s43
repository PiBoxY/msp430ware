; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2013, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;******************************************************************************
;  MSP430i20xx Demo - eUSCI_B0, SPI 4-Wire Slave Data Echo
;
;  Description: SPI slave talks to SPI master using 4-wire mode. Data received
;  from master is echoed back.
;
;  ACLK = 32kHz, MCLK = SMCLK = Calibrated DCO = 16.384MHz
;  * Ensure low_level_init.s43 is included when building/running this example *
;
;  Note: Ensure slave is powered up before master to prevent delays due to
;  slave init
;
;           MSP430i20xx
;         ----------------
;     /|\|                |
;      | |                |
;      --|RST         P1.4|<-- Slave Select (UCA0STE)
;        |            P1.7|<-- Data In      (UCA0SIMO)
;        |            P1.6|--> Data Out     (UCA0SOMI)
;        |            P1.5|<-- Serial Clock (UCA0CLK)
;
;   T. Witt
;   Texas Instruments Inc.
;   October 2013
;   Built with IAR Embedded Workbench IDE v5.60
;******************************************************************************
#include "msp430.h"

            EXTERN  init                    ; low_level_init.s43 inclusion
;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
Cal         call    #init                   ; Calibrate peripherals
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop WDT
            bis.b   #BIT4|BIT5|BIT6|BIT7,&P1SEL0 ; eUSCI_B0 Pin Function
            bic.b   #BIT4|BIT5|BIT6|BIT7,&P1SEL1
            mov.w   #UCSWRST,&UCA0CTLW0     ; eUSCI in reset
            bis.w   #UCSYNC|UCCKPL|UCMSB|UCMODE_1|UCSTEM,&UCB0CTLW0
            ; 4-pin, 8-bit SPI slave, Clock polarity high, MSB
            bis.w   #UCSSEL_1,&UCB0CTLW0    ; ACLK
            mov.b   #0x02,&UCB0BR0
            clr.b   &UCB0BR1
            bic.w   #UCSWRST,&UCB0CTLW0     ; Initialize eUSCI
            bis.w   #UCRXIE,&UCB0IE         ; Enable RX interrupt

Mainloop    bis.w   #LPM0|GIE,SR            ; Enter LPM0 with interrupts
            nop                             ; For debugger
                                            ;
;-------------------------------------------------------------------------------
USCI_B0_ISR ; eUSCI_B0 ISR
;-------------------------------------------------------------------------------
            add.w   &UCB0IV,PC              ; Add interrupt offset
            reti                            ; No interrupt
            jmp     RXIFG_                  ; RXIFG
            reti                            ; TXIFG
RXIFG_      bit.w   #UCTXIFG,&UCB0IFG       ; eUSCI_B0 TX buffer ready?
            jeq     RXIFG_
            mov.w   &UCB0RXBUF,&UCB0TXBUF   ; Echo received data
            reti

;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR            ; POR, ext. Reset
            DW      RESET
            ORG     USCI_B0_VECTOR          ; eUSCI_B0 Vector
            DW      USCI_B0_ISR
            END
