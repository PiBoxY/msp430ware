; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2013, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;******************************************************************************
;  MSP430i20xx Demo - eUSCI_B0 I2C Master TX bytes to Multiple Slaves
;
;  Description: This demo connects two MSP430's via the I2C bus.
;  The master transmits to 4 different I2C slave addresses 0x0A,0x0B,0x0C&0x0D.
;  Each slave address has a specific related data in the array TXData[].
;  At the end of four I2C transactions the slave address rolls over and begins
;  again at 0x0A.
;                * used with "msp430i20xx_euscib0_i2c_13.asm *
;
;  ACLK = 32kHz, MCLK = SMCLK = Calibrated DCO = 16.384MHz
;  * Ensure low_level_init.s43 is included when building/running this example *
;
;                                /|\  /|\
;               MSP430i2041      10k  10k     MSP430i2041
;                   slave         |    |        master
;             -----------------   |    |   -----------------
;            |     P1.7/UCB0SDA|<-|----+->|P1.7/UCB0SDA     |
;            |                 |  |       |                 |
;            |                 |  |       |                 |
;            |     P1.6/UCB0SCL|<-+------>|P1.6/UCB0SCL     |
;            |                 |          |                 |
;
;   T. Witt
;   Texas Instruments Inc.
;   October 2013
;   Built with IAR Embedded Workbench IDE v5.60
;******************************************************************************
#include "msp430.h"

#define  TXByteCtr R5
#define  SlaveFlag R6
            EXTERN  init                    ; low_level_init.s43 inclusion
;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
            call    #init
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop WDT
            bis.b   #BIT6|BIT7,&P1SEL0      ; eUSCI_A0 Pin Function
            bic.b   #BIT6|BIT7,&P1SEL1
            mov.w   #UCSWRST,&UCB0CTLW0     ; eUSCI in reset
            bis.w   #UCMODE_3|UCMST|UCSSEL_2,&UCB0CTLW0 ; I2C Master mode
            mov.w   #0x0080,&UCB0BRW        ; SMCLK/128
            bic.w   #UCSWRST,&UCB0CTLW0     ; Initialize eUSCI
            bis.w   #UCTXIE0|UCNACKIE,&UCB0IE ; Enable interrupts
            clr.b   SlaveFlag               ; Initalize the Slave Flag

Main        mov.w   #TXData,R7              ; Start of TX buffer
            mov.w   #SlvAddr,R8             ; Configure Slave address
Mainloop    mov.w   @R8,&UCB0I2CSA
            inc.w   R8                      ; Increases Address for next transfer
            mov.b   #1,TXByteCtr            ; Load TX byte counter
StopChk     bit.w   #UCTXSTP,&UCB0CTLW0     ; Ensure stop condition was sent
            jne     StopChk
            bis.w   #UCTXSTT|UCTR,&UCB0CTLW0; I2C start condition
            bis.w   #LPM0|GIE,SR            ; Enter LPM0 w/ interrupts
            nop
            inc.b   SlaveFlag               ; Change Slave Address
            cmp.b   #0x04,SlaveFlag         ; Roll over slave address
            jlo     Mainloop
            clr.b   SlaveFlag
            mov.w   #1000,R15               ; Delay loop
Delay       dec.w   R15
            jnz     Delay
            mov.w   #TXData,R7              ; Start of TX buffer
            jmp     Main                    ; Again
                                            ;
;-------------------------------------------------------------------------------
TXData      ; TX Data array
;-------------------------------------------------------------------------------
            DW      0x00A1
            DW      0x00B1
            DW      0x00C1
            DW      0x00D1
;-------------------------------------------------------------------------------
SlvAddr     ; Slave Address array
;-------------------------------------------------------------------------------
            DW      0x000A
            DW      0x000B
            DW      0x000C
            DW      0x000D
;-------------------------------------------------------------------------------
USCI_B0_ISR    ; eUSCI_B0 ISR
;-------------------------------------------------------------------------------
            add.w    &UCB0IV,PC             ; Add interrupt offset
            reti                            ; No interrupt
            reti                            ; UCALIFG
            jmp      NACK_                  ; UCNACKIFG
            reti                            ; UCSTTIFG
            reti                            ; UCSTPIFG
            reti                            ; UCRXIFG3
            reti                            ; UCTXIFG3
            reti                            ; UCRXIFG2
            reti                            ; UCTXIFG2
            reti                            ; UCRXIFG1
            reti                            ; UCTXIFG1
            reti                            ; UCRXIFG0
            jmp      TX0_                   ; UCTXIFG0
            reti                            ; UCBCNTIFG
            reti                            ; UCCLTOIFG
            reti                            ; UCBIT9IFG
NACK_       bis.b    #UCTXSTT,&UCB0CTL1     ; I2C start condition
            reti
TX0_        cmp.w    #0x01,TXByteCtr        ; Check TX byte counter
            jne      StpCnd
            mov.w    @R7,&UCB0TXBUF         ; Put TX data in buffer
            inc.w    R7                     ; increase for next transfer
            dec.b    TXByteCtr              ; Decrement TX byte counter
            reti
StpCnd      bis.w    #UCTXSTP,&UCB0CTLW0    ; I2C stop condition
            bic.w    #UCTXIFG,&UCB0IFG      ; Clear USCI_B0 TX int flag
            bic.w    #LPM0,0(SP)            ; Exit LPM0
            reti

;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR            ; POR, ext. Reset
            DW      RESET
            ORG     USCI_B0_VECTOR          ; USCI B0 Vector
            DW      USCI_B0_ISR
            END
