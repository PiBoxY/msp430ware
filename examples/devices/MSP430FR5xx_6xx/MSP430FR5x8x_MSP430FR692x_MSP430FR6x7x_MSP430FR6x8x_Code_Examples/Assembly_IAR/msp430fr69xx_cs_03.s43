; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2014, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;******************************************************************************
;   MSP430FR69xx Demo - Output 32768Hz crystal on XT1 and observe failsafe
;
;   Description: Configure ACLK = LFXT1 and enter LPM3.
;   To observe failsafe behavior short the crystal briefly on the target board.
;   This will cause an NMI to occur. P1.0 is toggled inside the NMI ISR.
;   Once the fault flag is cleared XT1 operation continues from 32768Hz crystal
;   Otherwise ACLK defaults to LFMODCLK (~37.5KHz).
;   ACLK = LFXT1 = 32kHz, MCLK = SMCLK = 1MHz
;
;           MSP430FR6989
;         ---------------
;     /|\|            XIN|-
;      | |               | 32KHz Crystal
;      --|RST        XOUT|-
;        |               |
;        |           P5.2|---> ACLK = 32.768Hz (or 37.5kHz during LFXTOFFG)
;        |           P7.4|---> SMCLK = MCLK = 1MHz
;        |           P1.0|---> LED
;
;   E. Chen
;   Texas Instruments Inc.
;   April 2014
;   Built with IAR Embedded Workbench V5.60
;******************************************************************************
#include <msp430.h>

;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT
SetupGPIO   clr.b   &P1OUT
            mov.b   #BIT0,&P1DIR            ; Set P1.0 to output direction for LED

            bis.b   #BIT2,&P5DIR
            bis.b   #BIT2,&P5SEL0           ; Output ACLK
            bis.b   #BIT2,&P5SEL1

            bis.b   #BIT4,&P7DIR
            bis.b   #BIT4,&P7SEL0           ; Output SMCLK
            bis.b   #BIT4,&P7SEL1

            bis.w   #BIT4+BIT5,&PJSEL0      ; For XT1

UnlockGPIO  bic.w   #LOCKLPM5,&PM5CTL0      ; Disable the GPIO power-on default
                                            ; high-impedance mode to activate
                                            ; previously configured port settings

SetupCS     mov.b   #CSKEY_H,&CSCTL0_H      ; Unlock CS registers
            mov.w   #DCOFSEL_0,&CSCTL1      ; Set DCO to 1MHz
            mov.w   #SELA__LFXTCLK+SELS__DCOCLK+SELM__DCOCLK,&CSCTL2
            mov.w   #DIVA__1+DIVS__1+DIVM__1,&CSCTL3  ; Set all dividers
            bic.w   #LFXTOFF,&CSCTL4

OSCFlag     bic.w   #LFXTOFFG,&CSCTL5       ; Clear XT1 fault flag
            bic.w   #OFIFG,&SFRIFG1
            bit.w   #OFIFG,&SFRIFG1         ; Test oscillator fault flag
            jnz     OSCFlag

            bis.w   #OFIE,&SFRIE1           ; Now that osc is running enable fault interrupt

            bis.w   #LPM0,SR                ; Wait in LPM0 for fault flag
;------------------------------------------------------------------------------
UNMI_ISR;    User Non-maskable Interrupt Service Routine
;------------------------------------------------------------------------------
            bic.w   #LFXTOFFG,&CSCTL5       ; Clear XT1 fault flag
            bic.w   #OFIFG,&SFRIFG1
            bis.b   #BIT0,&P1OUT
Wait        mov.w   #0x208a,R15             ; Delay to R15 ~25000 CPU cycles
L1          dec.w   R15                     ; Decrement R15
            jne     L1                      ; Delay over?
            bit.w   #OFIFG,&SFRIFG1         ; Test oscillator fault flag
            jnz     UNMI_ISR
            bic.b   #BIT0,&P1OUT
            reti
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR            ; Reset Vector
            DW      RESET
            ORG     UNMI_VECTOR             ; UNMI Vector
            DW      UNMI_ISR
            END
