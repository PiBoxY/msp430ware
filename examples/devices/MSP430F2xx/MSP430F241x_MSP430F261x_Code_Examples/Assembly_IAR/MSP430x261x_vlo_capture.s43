; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2012, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;******************************************************************************
;  MSP430x261x Demo - Basic Clock, VLO-Driven Timer with VLO Compensation
;
;  This example toggles P1.0 approx. every second, using a timer driven by the
;  VLO.  The VLO freq can vary between 4kHz-20kHz, so the timer compare value 
;  must be adjusted to compensate, in order to produce a one-second interval.  
;  So in effect, this code performs a kind of "calibration" of the VLO.  This 
;  is done by counting the number of 1MHz DCO pulses in one ACLK=VLO/8 period, 
;  assigned to dco_delta.  VLO is /8 in order to increase the number of DCO 
;  pulses in one ACLK pulse, increasing the resolution of the measurement, 
;  and therefore the accuracy of the one-second interval.  Since 1,000,000 
;  DCO pulses at 1MHz are required to produce a one-second interval, the 
;  number of VLO/8 pulses in one second is given by 1M/dco_delta.  This value 
;  is loaded into TACCR0 as the timer compare value.  
 
;  MSP430x2xx devices are shipped with calibration values in info memory that,
;  when used by software, allow the DCO to operate within approx. +/-1% of 
;  common values such as 1MHz.  (See the datasheet for add'l information.)  
;  Through the algorithm shown here, this accuracy is extended to the VLO.  An
;  additional source of error in this algorithm is that the VLO/8 freq will 
;  most likely not be evenly divisible by the DCO freq, and therefore up to 
;  one DCO pulse may be lost.  At nominal values, there are 400 1MHz DCO 
;  pulses in one 2.5kHz VLO/8 pulse, so losing one clock pulse produces 
;  ~0.25% error, in addition to the error tolerance of the calibrated DCO.  
;  ACLK = VLO/8, MCLK = SMCLK = 1MHz
;
;             MSP430F261x/241x
;             -----------------
;         /|\|              XIN|-
;          | |                 |
;          --|RST          XOUT|-
;            |                 |
;            |                 |
;            |       P1.0/TACLK|-->LED 1 second interrupt
;
;  
;   B. Nisarga 
;   Texas Instruments Inc.
;   September 2007
;   Built with IAR Embedded Workbench Version: 3.42A
;*******************************************************************************
#include <msp430.h>

RSEG      DATA16_I
dco_delta DS 2

;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; Assemble to Flash memory
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT
SetupP1     bis.b   #011h, &P1DIR           ; P1.0,4 outputs
            bis.b   #010h, &P1SEL           ; P1.4 = SMCLK

            calla   #measureVLO
            mov.w   r12, &dco_delta         ; dco delta = number of 1MHz cycles 
                                            ; in 8 VLO cycles
            ; Clock settings: DCO freq = 1MHz; ACLK = VLO/8
            
SetupC0     mov.w   #CCIE,&TACCTL0          ; TACCR0 interrupt enabled            
            ; TACCRO = 1000000/dco_delta 
            clr.w   r10
            clr.w   r11
            mov.w   #0ffffh, r15	    ; r15 = quotient
            mov.w   #04240h, r12	    ; 1000000 = 0F4240h in r12 and r13		
            mov.w   #00Fh, r13		    ;  = dividend
            mov.w   &dco_delta, r14	    ; r14 = divisor
Start       cmp.w   r12, r10
            jnc     Continue                ; unsigned number compare
            cmp.w   r13, r11
            jnc     Continue                ; unsigned number compare
            jmp     Stop       
Continue    mov.w   r10, r9
            add.w   r14,r9		    
            jnc     One
            inc.w   r11
One         add.w   r14,r10
            inc.w   r15
            jmp     Start   
Stop        mov.w   r15,&TACCR0
            ; 
SetupTA     mov.w   #TASSEL_1+MC_1,&TACTL   ; ACLK, upmode
            mov.b   #01h, P1OUT
Mainloop    bis.w   #LPM3+GIE,SR            ; Enter LPM3, interrupts enabled
            nop                             ; Required only for debugger            
            
;-------------------------------------------------------------------------------
measureVLO
;           returns: r12
;           -An int representing the number of 8MHz clock pulses in one VLO cycle
;-------------------------------------------------------------------------------       
CheckCal    cmp.b   #0xFF,&CALBC1_1MHZ      ; Check calibration constant
            jne     Load                    ; if not erased, load.       
Trap        jmp     Trap                    ; if erased do not load, trap CPU!            
Load        clr.b   &DCOCTL                 ; Select lowest DCOx and MODx settings
            mov.b   &CALBC1_1MHZ, &BCSCTL1  ; Set range
            mov.b   &CALDCO_1MHZ, &DCOCTL   ; Set DCO step + modulation
            mov.w   #CM_1+CCIS_1+CAP,&TACCTL2 ; CAP, ACLK
            mov.w   #TASSEL_2+MC_2+TACLR, &TACTL; SMCLK, cont-mode, clear
            mov.b   #LFXT1S_2,    &BCSCTL3  ; ACLK = VLO
            clr.b   &BCSCTL2
            bis.b   #DIVA_3,      &BCSCTL1  ; ACLK=VLO/8
            
            bic.w   #CCIFG,       &TACCTL2  ; Clear capture flag
edge_one    bit.w   #CCIFG,       &TACCTL2  ; Test capture flag to skip 1st signal
            jz      edge_one
            bic.w   #CCIFG,       &TACCTL2  ; Clear capture flag

edge_two    bit.w   #CCIFG,       &TACCTL2  ; Test capture flag to skip 2nd signal
            jz      edge_two                ;
            mov.w   &TACCR2,      r13       ; save hardware captured value
            bic.w   #CCIFG,       &TACCTL2  ; Clear capture flag

edge_three  bit.w   #CCIFG,       &TACCTL2  ; Test capture flag to capture a good clock
            jz      edge_three              ;
            bic.w   #MC_3,        &TACTL    ; stop timer
            mov.w   &TACCR2,      r12
            sub.w   r13,          r12
            reta            
                                            ;
;------------------------------------------------------------------------------
TA0_ISR;    Toggle P1.0
;------------------------------------------------------------------------------
            xor.b   #BIT0,&P1OUT            ; Toggle P1.0
            reti                            ;	                                                   
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR            ; MSP430 RESET Vector
            DW      RESET                   ;
            ORG     TIMERA0_VECTOR          ; Timer_A0 Vector
            DW      TA0_ISR                 ;
            END
