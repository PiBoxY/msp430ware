; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2012, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;*******************************************************************************
;  MSP430F530x Demo - ADC10, Sample A5, 1.5V Ref, TA0.1 Trig, Ultra-Low Pwr
;
;  Description: A5 is sampled 1024/second (32xACLK) with Vref = internal 1.5V.
;  All activity is interrupt driven with proper usage of MSP430 low-power
;  modes, ADC10 and Vref demonstrated. Timer_A0 used in upmode to drive ADC10 
;  conversion (continuous mode can also be used).
;  Inside of TA0_ISR software will enable ADC10 and internal reference and
;  allow > 75us delay for Vref to stabilize prior to sample start. Sample
;  start is automatically triggered by TA0 every 32 ACLK cycles. ADC10_ISR
;  will disable ADC10 and Vref and compare ADC10 conversion code. Internal
;  oscillator times sample (16x) and conversion (13x). If A5 > 0.2V, P1.0 is
;  set, else reset. Standy mode is LPM3.
;  //* An external watch crystal on XIN XOUT is required for ACLK *//
;
;                    +-----(0.9766ms)---------\\------------------>+
;    TA0_ISR        TA0.1      ADC10_ISR             TA0_ISR        TA0.1
;  -----+------------+------------+-----------\\------+------------+----->
;   Enable ADC    Trigger ADC  Disable ADC, 
;   and Vref                   Ref; Compare
;       +-( ~75us--->+
;
;               MSP430F530x
;            -----------------
;        /|\|              XIN|-
;         | |                 | 32kHz
;         --|RST          XOUT|-
;           |                 |
;       >---|P6.5/A5     P1.0 |--> LED
;           |             P1.2|-->TA0.1 (ADC trigger signal)
;
;
;  K. Chen
;  Texas Instruments Inc.
;  March 2012
;  Built with IAR Embedded Workbench Version: 5.40.3 
;*******************************************************************************

#include <msp430.h>

;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; Assemble to Flash memory
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop WDT

; Port I/O config
SetupP1     bis.b   #BIT0,&P1DIR            ; Set P1.0 to output direction
            bic.b   #BIT0,&P1OUT            ; Clear P1.0
            bis.b   #BIT2,&P1DIR            ; P1.2/TA0.1 output
            bis.b   #BIT2,&P1SEL            ; TA0.1 function select
            
; Configure XT1
            bis.b   #BIT4 | BIT5,&P5SEL     ; Port select XT1
            bic.w   #XT1OFF,&UCSCTL6        ; XT1 On
            bis.w   #XCAP_3,&UCSCTL6        ; Internal load cap
            mov.w   #0,&UCSCTL3             ; FLL Reference Clock = XT1
            
; Loop until XT1,XT2 & DCO stabilizes - In this case loop until XT1 and DCo 
do_loop     bic.w   #XT2OFFG | XT1LFOFFG | DCOFFG,&UCSCTL7 
                                            ; Clear XT2,XT1,DCO fault flags            
            bic.w   #OFIFG,&SFRIFG1         ; Clear fault flags
            and.w   #OFIFG,&SFRIFG1         ; Test oscillator fault flag
            jnz     do_loop                 ; Again
            bic.w   #XT1DRIVE_3,&UCSCTL6    ; Xtal is now stable, 
                                            ; reduce drive strength
            bis.w   #SELA_0,&UCSCTL4        ; ACLK = LFTX1 (by default)

; Configure ADC10
            bis.b   #BIT5,&P6SEL            ;  
SetupADC10  bis.w   #ADC10SHS_1,&ADC10CTL1  ; TA0.1 trigger sample start
            bis.w   #ADC10RES,&ADC10CTL2    ; 10-bit conversion results
            bis.w   #ADC10INCH_5,&ADC10MCTL0; A5 ADC input select; Vref=1.5V
            
; Configure Timer (TA0.1 - see device specific d/s) -> ADC conversion trigger           
            mov.w   #32-1,&TA0CCR0          ; PWM Period 
            mov.w   #16-1,&TA0CCR1          ; TA0.1 PWM
            bis.w   #OUTMOD_3 | CCIE,&TA0CCTL1 
                                            ; TACCR1 set/reset; enable interrupt
            bis.w   #TASSEL_1 | MC_1| TACLR,&TA0CTL ; ACLK, up mode  

            bis.w   #LPM3 | GIE,SR          ; Enter LPM3 w/ interrupts
            nop
;-------------------------------------------------------------------------------
ADC10_ISR;
;-------------------------------------------------------------------------------
            add.w   &ADC10IV,PC             ; Add offset to PC
            reti                            ; Vector 0:  No interrupt
            reti                            ; Vector 2:  ADC overflow
            reti                            ; Vector 4:  ADC timing overflow
            reti                            ; Vector 6:  ADC10HI
            reti                            ; Vector 8:  ADC10LO
            reti                            ; Vector 10: ADC10IN               
            jmp     ADC10IFG0_HND           ; Vector 12: ADC10IFG3

ADC10IFG0_HND
            bic.w   #ADC10ENC,&ADC10CTL0    ; ADC10 ENC reset in order to modify 
                                            ; ADC10CTL and MCTL registers
            
            bic.w   #ADC10ON,&ADC10CTL0     ; ADC10 disabled completely
            bic.w   #ADC10SREF_1,&ADC10MCTL0; Clear internal 
                                            ; Reference Vref+ select
            bic.w   #REFON,&REFCTL0         ; Turn off internal shared reference         
            cmp.w   #088h,&ADC10MEM0        ; ADC10MEM0 = A5 > 0.2V?
            jnc     ADC10_Exit              ; Again
            bis.b   #BIT0,&P1OUT            ; P1.0 = 1
            reti
ADC10_Exit  bic.b   #BIT0,&P1OUT            ; P1.0 = 0
            reti                            ;
                                            ;
;-------------------------------------------------------------------------------
TA0_ISR
;-------------------------------------------------------------------------------
            add.w   &TA0IV,PC               ; Add offset to PC
            reti                            ; Vector 0:  No interrupt
            bis.w   #ADC10SREF_1,&ADC10MCTL0; Vector 2:  CCR1 interrupt,
                                            ; reference = Vref+
            bis.w   #ADC10SHT_2 | ADC10ON,&ADC10CTL0 
                                            ; 16xADC clock cycles, ADC10ON
while_loop  and.w   #REFGENBUSY,&REFCTL0    ; If ref generator busy, WAIT       
            jnz     while_loop              ; 
            bis.w   #REFVSEL_0 | REFON,&REFCTL0 
                                            ; Internal Reference ON; Vref=1.5V 

;Reference settling time (75us)            
            mov.w   #80,R4                  ; Initialize loop counter R4=80
delay_loop  dec.w   R4                      ; Decrement loop counter
            jnz     delay_loop              ; Loop if loop counter > 0
            
            bis.w   #ADC10IE0,&ADC10IE      ; Enable ADC conv complete interrupt 
            bis.w   #ADC10ENC,&ADC10CTL0    ; ADC10 Enable
            reti
            reti                            ; Vector 4:  CCR2 not used
            reti                            ; Vector 6:  CCR3 not used
            reti                            ; Vector 8:  CCR4 not used
            reti                            ; Vector 10: CCR5 not used               
            reti                            ; Vector 12: reserved
            reti                            ; Vector 14: overflow
            
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     ADC10_VECTOR            ; ADC10 Vector
            DW      ADC10_ISR
            ORG     TIMER0_A1_VECTOR        ; Timer_A0 Vector
            DW      TA0_ISR
            ORG     RESET_VECTOR            ; POR, ext. Reset
            DW      RESET
            END
