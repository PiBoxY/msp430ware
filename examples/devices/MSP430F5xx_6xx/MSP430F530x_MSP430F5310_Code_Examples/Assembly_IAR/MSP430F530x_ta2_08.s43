; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2012, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;*******************************************************************************
;  MSP430F530x Demo - Timer2_A3, Toggle P1.0;P2.3-5, Cont. Mode ISR, 32kHz ACLK
;
;  Description: Use Timer1_A CCRx units and overflow to generate four
;  independent timing intervals. For demonstration, CCR0, CCR1 and CCR2
;  output units are optionally selected with port pins P2.3, P2.4 and P2.5
;  in toggle mode. As such, these pins will toggle when respective CCRx
;  registers match the TAR counter. Interrupts are also enabled with all
;  CCRx units, software loads offset to next interval only - as long as
;  the interval offset is added to CCRx, toggle rate is generated in
;  hardware. Timer1_A overflow ISR is used to toggle P1.0 with software.
;  Proper use of the TAIV interrupt vector generator is demonstrated.
;  ACLK = TACLK = 32kHz, MCLK = SMCLK = default DCO ~1.045MHz
;
;  As coded and with TACLK = 32768Hz, toggle rates are:
;  P2.3= CCR0 = 32768/(2*4) = 4096Hz
;  P2.4= CCR1 = 32768/(2*16) = 1024Hz
;  P2.5= CCR2 = 32768/(2*100) = 163.84Hz
;  P1.0= overflow = 32768/(2*65536) = 0.25Hz
;
;               MSP430F530x
;            -------------------
;        /|\|                   |
;         | |                   |
;         --|RST                |
;           |                   |
;           |         P2.3/TA2.0|--> CCR0
;           |         P2.4/TA2.1|--> CCR1
;           |         P2.5/TA2.2|--> CCR2
;           |               P1.0|--> Overflow/software
;           |               P1.0|--> LED
;
;  K. Chen
;  Texas Instruments Inc.
;  March 2012
;  Built with IAR Embedded Workbench Version: 5.40.3 
;*******************************************************************************

#include <msp430.h>

;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; Assemble to Flash memory
;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW|WDTHOLD,&WDTCTL  ; Stop WDT

SetupP2     bis.b   #BIT3|BIT4|BIT5,&P2DIR  ; P2.3 - P2.5 option select
            bis.b   #BIT3|BIT4|BIT5,&P2SEL  ; P2.3 - P2.5 outputs
SetupP1     bis.b   #BIT0,&P1DIR            ; P1.0 output

; Configure XT1
            bis.b   #BIT4 | BIT5,&P5SEL     ; Port select XT1
            bic.w   #XT1OFF,&UCSCTL6        ; XT1 On
            bis.w   #XCAP_3,&UCSCTL6        ; Internal load cap
            mov.w   #0,&UCSCTL3             ; FLL Reference Clock = XT1

; Loop until XT1,XT2 & DCO stabilizes - In this case loop until XT1 and DCo
do_loop     bic.w   #XT2OFFG | XT1LFOFFG | DCOFFG,&UCSCTL7 
                                            ; Clear XT2,XT1, DCO fault flags
            bic.w   #OFIFG,&SFRIFG1         ; Clear fault flags
            bit.w   #OFIFG,&SFRIFG1         ; Test oscillator fault flag
            jnz     do_loop                 ; Again
            bic.w   #XT1DRIVE_3,&UCSCTL6    ; Xtal is now stable, reduce drive
                                            ; strength
            bis.w   #SELA_0,&UCSCTL4        ; ACLK = LFTX1 (by default)

; Configure TimerA2 
            mov.w   #OUTMOD_4|CCIE,&TA2CCTL0; CCR0 toggle, interrupt enabled 
            mov.w   #OUTMOD_4|CCIE,&TA2CCTL1; CCR1 toggle, interrupt enabled 
            mov.w   #OUTMOD_4|CCIE,&TA2CCTL2; CCR2 toggle, interrupt enabled                                             
SetupTA     mov.w   #TASSEL_1|MC_2 | TACLR | TAIE,&TA2CTL 
                                            ; ACLK, contmode, clear TAR
                                         					
Mainloop    bis.w   #LPM3|GIE,SR            ; Enter LPM3, enable interrupts
            nop                             ; Required for debugger

;-------------------------------------------------------------------------------
TA0_ISR
;-------------------------------------------------------------------------------            
            add.w   #4,&TA2CCR0             ; Add Offset to CCR0
            reti                            ;		
            
;-------------------------------------------------------------------------------       
TAX_ISR;    Common ISR for CCR1-4 and overflow
;-------------------------------------------------------------------------------
            add.w   &TA2IV,PC               ; Add Timer_A offset vector
            reti                            ; Vector 0 - no interrupt
            jmp     CCR1_ISR                ; Vector 1 - CCR1
            jmp     CCR2_ISR                ; Vector 2 - CCR2
            reti                            ; Vector 3 - Reserved not used
            reti                            ; Vector 4 - Reserved not used
            reti                            ; Vector 5 - Reserved not used
            reti                            ; Vector 6 - Reserved not used
TA_over     xor.b   #BIT0,&P1OUT            ; Vector 7 - overflow (Toggle P1.0)
            reti                            ; Return from overflow ISR
        
CCR1_ISR    add.w   #16,&TA2CCR1            ; Add Offset to CCR1
            reti
CCR2_ISR    add.w   #100,&TA2CCR2           ; Add Offset to CCR2
            reti   
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR            ; MSP430 RESET Vector
            DW      RESET                   ;
            ORG     TIMER2_A0_VECTOR        ; Timer2_A0 Vector
            DW      TA0_ISR                 ;
            ORG     TIMER2_A1_VECTOR        ; Timer2_A1 Vector
            DW      TAX_ISR                 ;
            END
