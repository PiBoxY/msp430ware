; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2012, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;*******************************************************************************
;  MSP430x530x Demo - DMA0, Repeated Block UCA1UART 9600, TACCR2, ACLK
;
;  Description: DMA0 is used to transfer a string byte-by-byte as a repeating
;  block to UCA1TXBUF. Timer_A operates continuously at 32768Hz with CCR2IFG
;  triggering DMA0. "Hello World" is TX'd via 9600 baud UART1.
;  ACLK= TACLK 32768Hz, MCLK= SMCLK= default DCO ~ 1048576Hz
;  Baud rate divider with 32768hz XTAL @9600 = 32768Hz/9600 = 3.41 (000Dh 4Ah )
;  //* An external watch crystal on XIN XOUT is required for ACLK *//	
;  //* MSP430F169 Device Required *//
;
;              MSP430x530x
;            -----------------
;        /|\|              XIN|-
;         | |                 | 32768Hz
;         --|RST          XOUT|-
;           |                 |
;           |             P4.4|------------> "Hello World"
;           |                 | 9600 - 8N1
;
;
;  K. Chen
;  Texas Instruments Inc.
;  March 2012
;  Built with IAR Embedded Workbench Version: 5.40.3 
;*******************************************************************************

#include <msp430.h>

;-------------------------------------------------------------------------------
#define      LF      0x0a
#define      CR      0x0d
;-------------------------------------------------------------------------------
 
;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; Assemble to Flash memory
;-------------------------------------------------------------------------------
String1     DB      CR,LF,"Hello World"

;-------------------------------------------------------------------------------
RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
StopWDT     mov.w   #WDTPW | WDTHOLD,&WDTCTL; Stop watchdog timer

            bis.b   #BIT4|BIT5,&P5SEL       ; Select XT1

            bic.w   #XT1OFF,&UCSCTL6        ; XT1 On            
            bis.w   #XCAP_3,&UCSCTL6        ; Internal load cap            
            mov.w   #0,&UCSCTL3             ; FLL Reference Clock = XT1

; Loop until XT1,XT2 & DCO stabilizes - In this case loop until XT1 and DCO 
; settle
do_while    bic.w   #XT2OFFG | XT1LFOFFG | DCOFFG,&UCSCTL7
                                            ; Clear XT2,XT1,DCO fault flags
            bic.w   #OFIFG,&SFRIFG1         ; Clear fault flags
            bit.w   #OFIFG,&SFRIFG1         ; Test oscillator fault flag
            jc      do_while
            
            bic.w   #XT1DRIVE_3,&UCSCTL6    ; Xtal is now stable, reduce drive 
                                            ; strength
            bis.w   #SELA_0,&UCSCTL4        ; ACLK = LFTX1 (by default)            

SetupUSCIA1 bis.b   #BIT4|BIT5,&P4SEL       ; P4.4,5 = UART1 TXD/RXD
            bis.b   #UCSWRST,&UCA1CTL1      ; 8-bit characters
            mov.b   #UCSSEL_1,&UCA1CTL1     ; CLK = ACLK
            mov.b   #0x03,&UCA1BR0          ; 32768Hz 9600 32k/9600=3.41
            mov.b   #0x00,&UCA1BR1          ;
            mov.b   #UCBRS_3|UCBRF_0,&UCA1MCTL ; Modulation UCBRSx = 3
            bic.b   #UCSWRST,&UCA1CTL1      ; **Initialize USCI state machine**
SetupDMA0   mov.w   #DMA0TSEL_1,&DMACTL0    ; 0-CCR2IFG
            movx.a  #String1,&DMA0SA        ; Source block address
            movx.a  #UCA1TXBUF,&DMA0DA      ; Destination single address
            mov.w   #13,&DMA0SZ             ; Block size
            mov.w   #DMADT_4 | DMASRCINCR_3 | DMASBDB | DMAEN,&DMA0CTL 
                                            ; Rpt, inc src, enable
                                            ;
            mov.w   #8192,&TA0CCR0          ; Char freq = TACLK/CCR0                                
            mov.w   #1,&TA0CCR2             ; For DMA0 trigger
            mov.w   #TASSEL_1 | MC_1,&TA0CTL; ACLK, up-mode
            
Mainloop    bis.w   #LPM3|GIE,SR            ; Enter LPM3 w/ interrupts           
            nop                             ; Required only for debugger
                                            ;
;-------------------------------------------------------------------------------
                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR            ; POR, ext. Reset
            DW      RESET
            END
