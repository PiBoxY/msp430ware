; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2012, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;******************************************************************************
;  MSP430F543xA Demo - ADC12_A, Repeated Single Channel Conversions
;
;  Description: This example shows how to perform repeated conversions on a
;  single channel using "repeat-single-channel" mode.  AVcc is used for the
;  reference and repeated conversions are performed on Channel A0. Each
;  conversion result is moved to an 8-element array called results[].  Test by
;  applying a voltage to channel A0, then running. Open a watch window in
;  debugger and view the results. Set Breakpoint1 in the index increment line
;  to see the array value change sequentially and Breakpoint to see the entire
;  array of conversion results in "results[]" for the specified Num_of_Results.
;  This can run even in LPM4 mode as ADC has its own clock (MODOSC)
;
;                MSP430F5438A
;             -----------------
;         /|\|                 |
;          | |                 |
;          --|RST              |
;            |                 |
;     Vin -->|P6.0/A0          |
;            |                 |
;
;
;   D. Dang
;   Texas Instruments Inc.
;   December 2009
;   Built with IAR Embedded Workbench Version: 4.21.8
;******************************************************************************

#include <msp430.h>

;-------------------------------------------------------------------------------
;-------------------------------------------------------------------------------
            RSEG    DATA16_I                ; Assemble to Flash memory
;-------------------------------------------------------------------------------
results   DS16    8

;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; Assemble to Flash memory
;-------------------------------------------------------------------------------

RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
            mov.w   #WDTPW + WDTHOLD,&WDTCTL; Stop WDT    
            clr.w   R4                      ; Clear the array index             
            bis.b   #0x01,&P6SEL            ; Enable A/D channel inputs            
            mov.w   #ADC12ON + ADC12MSC + ADC12SHT0_8,&ADC12CTL0
                                            ; Turn on ADC12, set sampling time
                                            ;  set multiple sample conversion
            mov.w   #ADC12SHP + ADC12CONSEQ_2,&ADC12CTL1  
                                            ; Use sampling timer, set mode
            mov.w   #0x01,&ADC12IE          ; Enabled ADC12IFG.0
            bis.w   #ADC12ENC,&ADC12CTL0    ; Enable conversions
            bis.w   #ADC12SC,&ADC12CTL0     ; Start conversion - sw trigger
            
            bis.w   #LPM4 + GIE,SR          ; Enter LPM0, enable interrupts
            nop                             ; Only for debugging purposes
                        
;-------------------------------------------------------------------------------
ADC12_ISR
;-------------------------------------------------------------------------------
            add.w   &ADC12IV,PC             ; Add offset to PC
            reti                            ; Vector 0:  No interrupt
            reti                            ; Vector 2:  ADC overflow
            reti                            ; Vector 4:  ADC timing overflow
            jmp     ADC12IFG0_HND           ; Vector 6:  ADC12IFG0
            reti                            ; Vector 8:  ADC12IFG1
            reti                            ; Vector 10: ADC12IFG2
            reti                            ; Vector 12: ADC12IFG3
            reti                            ; Vector 14: ADC12IFG4
            reti                            ; Vector 16: ADC12IFG5
            reti                            ; Vector 18: ADC12IFG6
            reti                            ; Vector 20: ADC12IFG7
            reti                            ; Vector 22: ADC12IFG8
            reti                            ; Vector 24: ADC12IFG9
            reti                            ; Vector 26: ADC12IFG10
            reti                            ; Vector 28: ADC12IFG11
            reti                            ; Vector 30: ADC12IFG12
            reti                            ; Vector 32: ADC12IFG13
            reti                            ; Vector 34: ADC12IFG14

ADC12IFG0_HND           
            rla.w   R4                      ; Index * 2 > indirect offset
            mov.w   &ADC12MEM0,0x1C00(R4)   ; Move A0 results, IFG is cleared
            rra.w   R4                      ; Indirect offset / 2 > index 
            inc.w   R4                      ; Increment arr_index
            cmp.b   #0x08,R4                ; Is arr_index < 8 ? 
            jne     exit_isr                ;   yes -> Jump to exit_isr
            clr     R4                      ;   no  -> Clear arr_index
            nop                             ; Set breakpoint here 
exit_isr    reti                            ; Return from interrupt 
            
;-------------------------------------------------------------------------------
                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     ADC12_VECTOR                ; ADC12 isr vector
            DW      ADC12_ISR
            ORG     RESET_VECTOR                ; POR, ext. Reset
            DW      RESET
            END
