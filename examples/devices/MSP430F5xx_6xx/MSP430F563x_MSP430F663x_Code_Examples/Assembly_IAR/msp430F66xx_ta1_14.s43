; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2012, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;******************************************************************************
;  MSP430F66xx Demo - Timer_A3, Toggle P3.1/TA1.0, Up/Down Mode, 32kHz ACLK
;
;  Description: Toggle P3.1 using hardware TA1.0 output. Timer1_A is configured
;  for up/down mode with CCR0 defining period, TA1.0 also output on P3.1. In
;  this example, CCR0 is loaded with 5 and TA1.0 will toggle P3.1 at TACLK/2*5.
;  Thus the output frequency on P3.1 will be the TACLK/20. No CPU or software
;  resources required. Normal operating mode is LPM3.
;  As coded with TACLK = ACLK, P3.1 output frequency = 32KHz/20 = 1.6384kHz
;  ACLK = TACLK = XT1 = 32768Hz, MCLK = default DCO ~1.045MHz
;
;                MSP430F6638
;             -----------------
;        /|\ |            XIN|-
;         |  |                 | 32kHz
;         ---|RST  XOUT|-         
;           |                   |
;           |         P3.1/TA1.0|-->ACLK/20
;
;   Priya Thanigai
;   Texas Instruments Inc.
;   March 2010
;   Built with IAR Embedded Workbench Version: 4.20
;******************************************************************************

#include <msp430.h>
;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; Assemble to Flash memory
;-------------------------------------------------------------------------------

RESET       mov.w   #SFE(CSTACK),SP         ; Initialize stackpointer
            mov.w   #WDTPW + WDTHOLD,&WDTCTL; Stop WDT    
            bis.b   #BIT1,&P3DIR            ; P3.1 output
            bis.b   #BIT1,&P3SEL            ; P3.1 option select
            
            ; Initialize LFXT1
Test_LOCKIO bit.w   #LOCKBAK,&BAKCTL
            jz      Clock_Init
            bic.w   #LOCKBAK,&BAKCTL
            jmp     Test_LOCKIO
           
Clock_Init  bic.w   #XT1OFF,&UCSCTL6        ; XT1 On
            bis.w   #XCAP_3,&UCSCTL6        ; Internal load cap

            ; Loop until XT1 fault flag is cleared
do_while1   bic.w   #XT1LFOFFG,&UCSCTL7     ; Clear XT1 fault flags
            bit.w   #XT1LFOFFG,&UCSCTL7     ; Test XT1 fault flag
            jc      do_while1


            mov.w   #OUTMOD_4,&TA1CCTL0     ; CCR0 toggle mode
            mov.w   #5,&TA1CCR0 
            mov.w   #TASSEL_1 + MC_3 + TACLR,&TA1CTL
                                            ; ACLK, up-downmode, clear TAR

            bis.w   #LPM3,SR                ; Enter LPM3
            nop                             ; For debugger
            
;-------------------------------------------------------------------------------
                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            COMMON  INTVEC                  ; Interrupt Vectors
;-------------------------------------------------------------------------------
            ORG     RESET_VECTOR                ; POR, ext. Reset
            DW      RESET
            END
