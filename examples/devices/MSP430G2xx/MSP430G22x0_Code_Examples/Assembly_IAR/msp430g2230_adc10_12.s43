; --COPYRIGHT--,BSD_EX
;  Copyright (c) 2012, Texas Instruments Incorporated
;  All rights reserved.
; 
;  Redistribution and use in source and binary forms, with or without
;  modification, are permitted provided that the following conditions
;  are met:
; 
;  *  Redistributions of source code must retain the above copyright
;     notice, this list of conditions and the following disclaimer.
; 
;  *  Redistributions in binary form must reproduce the above copyright
;     notice, this list of conditions and the following disclaimer in the
;     documentation and/or other materials provided with the distribution.
; 
;  *  Neither the name of Texas Instruments Incorporated nor the names of
;     its contributors may be used to endorse or promote products derived
;     from this software without specific prior written permission.
; 
;  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
;  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
;  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
;  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
;  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
;  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
;  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
;  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
;  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
;  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
;  EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
; 
; ******************************************************************************
;  
;                        MSP430 CODE EXAMPLE DISCLAIMER
; 
;  MSP430 code examples are self-contained low-level programs that typically
;  demonstrate a single peripheral function or device feature in a highly
;  concise manner. For this the code may rely on the device's power-on default
;  register values and settings such as the clock configuration and care must
;  be taken when combining code from several examples to avoid potential side
;  effects. Also see www.ti.com/grace for a GUI- and www.ti.com/msp430ware
;  for an API functional library-approach to peripheral configuration.
; 
; --/COPYRIGHT--
;******************************************************************************
;  MSP430F2230 Demo - ADC10, Sample A7, 1.5V, TA1 Trig, Ultra-Low Pwr
;
;  Description: A7 is sampled every ACLK/512 with reference to 1.5V. All
;  activity is interrupt driven with proper usage of MSP430 low-power modes,
;  ADC10 and Vref demonstrated. Timer_A with both TA1/TA0 used in upmode to
;  drive ADC10 conversion (continuous mode can also be used). Inside
;  of TA0_ISR software will enable ADC10 and internal reference and
;  allow > 30us delay for Vref to stabilize prior to sample start. Sample
;  start is automatically triggered by TA1 every ~20 ACLK cycles. ADC10_ISR
;  will disable ADC10 and Vref and compare ADC10 conversion code. Internal
;  oscillator times sample (16x) and conversion (13x). If A7 (pin5) > 0.2Vcc,
;  P1.2 is set, else reset. Normal Mode is LPM3.
;  ACLK = VLO (~10kHz), MCLK = SMCLK = default DCO ~ 1.2MHz, ADC10CLK = ADC10OSC
;
;                    +-----(0.9766us)---------\\------------------>+
;    TA0_ISR        TA1      ADC10_ISR             TA0_ISR        TA1
;  -----+------------+------------+-----------\\------+------------+----->
;   Enable ADC    Trigger ADC  Disable ADC
;   and Vref                   Compare
;       +-( >30us--->+
;
;
;               MSP430F2230
;            -----------------
;        /|\|              XIN|-
;         | |                 |
;         --|RST          XOUT|-
;           |                 |
;       >---|P1.7/A7     P1.2 |--> LED
;
;  B. Finch
;  Texas Instruments, Inc
;  May 2012
;  Built with CCS Version: 5.2.0.00069
;******************************************************************************

#include <msp430.h>

;-------------------------------------------------------------------------------
            RSEG    CSTACK                  ; Define stack segment
;-------------------------------------------------------------------------------
            RSEG    CODE                    ; Assemble to Flash memory
            EVEN
;-------------------------------------------------------------------------------  
RESET       mov.w   #0x280,SP               ; Initialize stackpointer
            mov.w   #WDTPW+WDTHOLD,&WDTCTL  ; Stop WDT
            mov.b   #0x1B,&P1REN            ; Terminate unavailable Port1 pins 
            bis.b   #LFXT1S_2,&BCSCTL3      ; Select VLO as low freqency clock

            mov.w   #INCH_7+SHS_1,&ADC10CTL1; Input A7, sample/hold Timer_A.OUT1
            bis.b   #BIT7,&ADC10AE0         ; P1.7 ADC option select
            bic.b   #BIT2,&P1OUT            ; Initialize LED as off
            bis.b   #BIT2,&P1DIR            ; Set P1.2 to output direction
            mov.w   #CCIE,TA0CCTL0          ; Enable interrupt
            mov.w   #32-1,&TACCR0           ; PWM Period
            mov.w   #OUTMOD_3,TA0CCTL1      ; TA0CCR1 output mode: set/reset
            mov.w   #2,&TA0CCR1             ; TA0CCR1 PWM Duty Cycle
            mov.w   #TASSEL_1+MC_1,&TACTL   ; ACLK, up mode, clear timer
            bis.w   #LPM0+GIE,SR            ; LPM0 (CPU off), ISR forces exit

;-------------------------------------------------------------------------------
ADC10_ISR
;-------------------------------------------------------------------------------
            bic.w   #ENC,&ADC10CTL0         ; clear ENC
            mov.w   #0,&ADC10CTL0           ; ADC10, Vref disabled completely
            cmp.w   #0x88,&ADC10MEM         ; Compare with 0.2V
            jn      less_thn                ; Jump if the ADC result < 0.2V
gtr_thn     bis.b   #BIT2,&P1OUT            ; Set P1.2 LED on
            reti
less_thn    bic.b   #BIT2,&P1OUT            ; Clear P1.2 LED off
            reti

;-------------------------------------------------------------------------------
TIMERA0_ISR
;-------------------------------------------------------------------------------
            ; Set ref, sample every 16 ADC clocks, enable ref, ADC on, enable int
            mov.w   #SREF_1+ADC10SHT_2+REFON+ADC10ON+ADC10IE,&ADC10CTL0 
            bis.w   #ENC,&ADC10CTL0         ; set ENC
            reti
            
;-------------------------------------------------------------------------------
;           Interrupt Vectors Used MSP430G22x0
;-------------------------------------------------------------------------------
            COMMON  INTVEC
            ORG     RESET_VECTOR            ; MSP430 RESET Vector
            DW      RESET   
            ORG     ADC10_VECTOR            ; ADC10 isr vector
            DW      ADC10_ISR
            ORG     TIMERA0_VECTOR          ; Timer_A0 Vector
            DW      TIMERA0_ISR
            END


