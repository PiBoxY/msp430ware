/*******************************************************************************
 * Copyright (c) ${year} Texas Instruments Incorporated - http://www.ti.com/
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Texas Instruments Incorporated - initial API and implementation
 *
 * Original Author:
 *     Boualem, Texas Instruments, Inc.
 *
 * Contributing Authors:
 *
 *******************************************************************************/

var assert = require("assert");
var ti_uncaught_Exception_handler = require("../lib/ti_uncaught_Exception_handler.js");
var fs = require("fs");

var find = /\\/g;
var re = new RegExp(find);
ti_uncaught_Exception_handler.setApplicationName("mochaTest");
ti_uncaught_Exception_handler.setExitOnUncaughtException(true);


/*
//var logFilename = "uncaughtExceptionLog_" + (new Date()).getTime() + ".log";
var goldenFile = "./test/golden.data";
var userTempDirectory = process.env.LOCALAPPDATA.replace(re, '/');
var logFileAbsolute = userTempDirectory + "/" + logFilename;



//ti_uncaught_Exception_handler.setLogFileName(logFilename);



process.on('uncaughtException', function (err)
{
});

f1();
*/


/* ===============================================
 * isFileContentIdentical
 * =============================================== */
function isFileContentIdentical(file1, file2)
{
    var content1 = fs.readFileSync(file1, "utf8").replace(/(\r\n|\n|\r)/gm, "");
    var content2 = fs.readFileSync(file2, "utf8").replace(/(\r\n|\n|\r)/gm, "");
    //console.log("compareFileContents called");
    var isSame = (content1 == content2);
    return isSame
}

//------Test Start here-------------------------------
//------------------------------------------------------
describe('ti_uncaught_Exception_handler.require', function ()
{
    it('ti_uncaught_Exception_handler should be an object', function ()
    {
        assert(ti_uncaught_Exception_handler !== undefined);
        assert(ti_uncaught_Exception_handler !== null);
    })

    it('ti_uncaught_Exception_handler should not be a function', function ()
    {
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler) !== '[object Function]');
    })
})



describe('exported functions', function ()
{
    it('exported functions must be defined', function ()
    {
        assert(ti_uncaught_Exception_handler.deleteUncaughtExceptionLogFile !== undefined);
        assert(ti_uncaught_Exception_handler.getLogFileDirectory !== undefined);
        assert(ti_uncaught_Exception_handler.getLogFileName !== undefined);
        assert(ti_uncaught_Exception_handler.setApplicationName !== undefined);
        assert(ti_uncaught_Exception_handler.setApplicationVersion !== undefined);
        assert(ti_uncaught_Exception_handler.setLogFileName !== undefined);
        assert(ti_uncaught_Exception_handler.setLogFileDirectory !== undefined);
        assert(ti_uncaught_Exception_handler.post !== undefined);
        assert(ti_uncaught_Exception_handler.uncaughtExceptionLogFileExist !== undefined);
        
    })

    it('exported functions must be functions', function ()
    {
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler.deleteUncaughtExceptionLogFile) === '[object Function]');
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler.getLogFileDirectory) === '[object Function]');
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler.getLogFileName) === '[object Function]');
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler.setApplicationName) === '[object Function]');
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler.setApplicationVersion) === '[object Function]');
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler.setLogFileName) === '[object Function]');
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler.setLogFileDirectory) === '[object Function]');
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler.post) === '[object Function]');
        assert(Object.prototype.toString.call(ti_uncaught_Exception_handler.uncaughtExceptionLogFileExist) === '[object Function]');
        
    })
})

function f1()
{
    f2();
}

function f2()
{
    f3();
}

function f3()
{
    f4();
}

function f4()
{
    f5();
}

function f5()
{
    throw new Error("uncaughtException");
}
