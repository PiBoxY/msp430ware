/*******************************************************************************
 * Copyright (c) ${year} Texas Instruments Incorporated - http://www.ti.com/
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Texas Instruments Incorporated - initial API and implementation
 *
 * Original Author:
 *     Boualem, Texas Instruments, Inc.
 *
 * Contributing Authors:
 *******************************************************************************/

var __DEBUG_MODE = false;

consoleDebug("+++++++++ Entering ti_uncaught_Exception_handler");

//----------- Import required modules-------
var mkdirp = require('mkdirp');
var fs = require('fs');
var http = require('http');
var dns = require('dns');
http.post = require('./ti_proxy_http_post.js');

//----------- Some constants/shared variables---------------
var oldNodeWebkit = false;
var isNodeWebkitApp = false;

var appName = "unknown";
var appVersion = "unknown";
var userHome = process.env[(process.platform == 'win32') ? 'USERPROFILE' : 'HOME'];
var tiHome = userHome + "/ti/";
var find = /\\/g;
var re = new RegExp(find);

var logFileDirectory = tiHome + appName + "/logs/";
var logFileName = 'uncaughtException.log';
var logFileAbsolute;

var exitOnUncaughtException = true;

var POST_SITE = 'http://go-dsp.com/sdo/uncaugh_exception_logs/upload3.php';
var POST_DATA = {};
var CONFIRM_DIALOG_TEXT = "An uncaught Exception occured the last time you run the application\nHelp us diagnose the issue and fix it\nSend the crashDump to Texas Instruments?\n\n";
var postURL = POST_SITE;
var postFileNameseparator = "__";

//-------------------------------------------------------------------------
//---depending on runtime (node versus node-webkit) and version
// set the appropriate uncaughtException handler
if (process.versions['node-webkit'])
{
    isNodeWebkitApp = true;
    // check the version
    var nodeWebkitversion = process.versions['node-webkit'];

    var nodeVersion = nodeWebkitversion.substring(0, 3);
    if (nodeVersion <= 0.8)
    {
        oldNodeWebkit = true;
        consoleDebug("---OLD node-webkit that does not supportProcess version=" + nodeWebkitversion);
    }
    else
    {
        consoleDebug("---Newer node-webkit that support process.on");
    }
}
else
{
    consoleDebug("---Node application");
}


if (oldNodeWebkit)
{
    consoleDebug("adding a window listener");
    window.addEventListener("error", errorFunction, false);
}
else
{
    process.on('uncaughtException', function (err)
    {
        consoleDebug("---process.on event handler called");
        consoleDebug(err);

        var stack = err.stack;
        logUnhandledExceptionAndExit(stack);
    });
}

/* ===============================================
 * getAbsoluteLogFileName
 * =============================================== */
function getAbsoluteLogFileName()
{
    if (logFileDirectory)
    {
        createInexistantLogDirectory(logFileDirectory);
        var absoluteFile = logFileDirectory + "/" + logFileName;
        return absoluteFile.replace(re, '/');
    }

    return logFileName;
}

/* ===============================================
 * errorFunction
 * =============================================== */
function errorFunction(event)
{
    consoleDebug("---window EventListener called");
    //event.filename, event.lineno , event.colno,  event.error, event.error.stack
    logUnhandledExceptionAndExit(event.error.stack);
};

/* ===============================================
 * logUnhandledExceptionAndExit
 * =============================================== */
function logUnhandledExceptionAndExit(stack)
{
    consoleDebug("stack=" + stack);
    var content2write = "-------------------------------------\n" +
        //(new Date()) + "\n" +
        new Date().toISOString() + "\n" +
        "uncaughtException! " + stack + "\n";
    fs.writeFileSync(getAbsoluteLogFileName(), content2write,
    {
        encoding: "utf8",
        flag: 'a'
    });

    setTimeout(function ()
    {
        consoleDebug("-------killing the process in 1 second");
        //process.kill(process.pid, 'SIGHUP');
        if (exitOnUncaughtException)
        {
            process.exit();
        }
    }, 1000); // 1 second to allow the log file to be written before exting
}

/* ===============================================
 * createInexistantLogDirectory
 * =============================================== */
function createInexistantLogDirectory(directory)
{
    if (!fs.existsSync(directory))
    {
        mkdirp.sync(directory);
    }
}

/* ===============================================
 * protectedCallBack
 * =============================================== */
function protectedCallBack(callback, data)
{
    if (isFunction(callback))

    {
        try
        {
            if (data)
                callback(data);
            else
                callback();
        }
        catch (err)
        {}
    }
}

/* ===============================================
 * isFunction
 * =============================================== */
function isFunction(afunction)
{
    return (afunction !== undefined && afunction !== null &&
        (Object.prototype.toString.call(afunction) === '[object Function]'));
}

/* ===============================================
 * isError
 * =============================================== */
function isError(error)
{
    if (error === undefined && error === null)
    {
        return false;
    }

    return (Object.prototype.toString.call(error) === '[object Error]');
}


/* ===============================================
 * consoleDebug
 * =============================================== */
function consoleDebug(message)
{
    if (__DEBUG_MODE)
    {
        console.log(message);
    }
}


//------------------------------------------------------------------------
//                                Exports
//------------------------------------------------------------------------

/* ===============================================
 * setApplicationName
 * =============================================== */
var setApplicationName = exports.setApplicationName = function (newValue)
{
    if (newValue)
    {
        appName = newValue;
        logFileDirectory = tiHome + appName + "/logs/";
    }
}

/* ===============================================
 * setApplicationVersion
 * =============================================== */
var setApplicationVersion = exports.setApplicationVersion = function (newValue)
{
    if (newValue)
    {
        appVersion = newValue;
    }
}

/* ===============================================
 * setLogFileName
 * =============================================== */
var setLogFileName = exports.setLogFileName = function (newFileName)
{
    if (newFileName)
    {
        logFileName = newFileName;
    }
}

/* ===============================================
 * getLogFileName
 * =============================================== */
var getLogFileName = exports.getLogFileName = function ()
{

    return logFileName;

}

/* ===============================================
 * getLogFileDirectory
 * =============================================== */
var getLogFileDirectory = exports.getLogFileDirectory = function ()
{
    return logFileDirectory;
}

/* ===============================================
 * setlogFileDirectory
 * =============================================== */
var setLogFileDirectory = exports.setLogFileDirectory = function (newLogFileDirectory)
{
    if (newLogFileDirectory)
    {
        logFileDirectory = newLogFileDirectory;
    }
}

/* ===============================================
 * CONFIRM_DIALOG_TEXT
 * =============================================== */
exports.CONFIRM_DIALOG_TEXT = CONFIRM_DIALOG_TEXT;

/* ===============================================
 * setExitOnUncaughtException
 *
 *  Do NOT USE: for testing only
 * =============================================== */
var setExitOnUncaughtException = exports.setExitOnUncaughtException = function (newValue)
{
    exitOnUncaughtException = newValue;
}

/* ===============================================
 * confirmDialog
 * =============================================== */
exports.confirmDialog = function ()
{
    // applicable only for node-webkit app and not for node.
    if (isNodeWebkitApp)
    {
        return window.confirm(CONFIRM_DIALOG_TEXT);
    }
    else
    {
        return true;
    }
}

/* ===============================================
 * uncaughtExceptionLogFileExist
 * =============================================== */
var uncaughtExceptionLogFileExist = exports.uncaughtExceptionLogFileExist = function ()
{
    return (fs.existsSync(getAbsoluteLogFileName()));
}

/* ===============================================
 * post
 * =============================================== */
var post = exports.post = function (responseOnEnd)
{
    if (uncaughtExceptionLogFileExist())
    {
        // create fileInfoList: only one file
        var fileInfoList = [];
        var millisecondTime = (new Date()).getTime();

        //'darwin', 'freebsd', 'linux', 'sunos' or 'win32'
        var os = process.platform;
        var postFileName = appName + postFileNameseparator + appVersion + postFileNameseparator + os + postFileNameseparator + millisecondTime + ".log";
        var paramName = "file0";
        var filePath = getAbsoluteLogFileName();
        fileInfoList[0] = {
            param: paramName,
            name: postFileName,
            path: filePath
        };


        consoleDebug(fileInfoList);
        consoleDebug("responseOnEnd=" + responseOnEnd);

        // Post them
        postUncaughtExceptionLogFile(fileInfoList, responseOnEnd);
    }
    else
    {
        protectedCallBack(responseOnEnd);
    }
};

/* ===============================================
 * postUncaughtExceptionLogFile
 * =============================================== */
function postUncaughtExceptionLogFile(fileInfoList, responseOnEnd)
{
    // post the file to TI----
    try
    {
        consoleDebug("about to post to: " + postURL);
        http.post(postURL, fileInfoList, function (res)
        {
            consoleDebug(res);

            //TODO: set error in responseOnEnd based on response
            if (isError(res))
            {
                consoleDebug("error in response");
                protectedCallBack(responseOnEnd, res);
            }
            else
            {
                if (res.statusCode == 500)
                {
                    var err = new Error("A server error occured that may affect one or more uploaded files");
                    protectedCallBack(responseOnEnd, err);
                }
                else
                {
                    consoleDebug("successful upload");
                    protectedCallBack(responseOnEnd);
                }
                //delete files regardless of outcome
                deleteUncaughtExceptionLogFile();
            }
        });
    }
    catch (err)
    {
        consoleDebug("Exception when posting=" + err.message);
        //delete files regardless of outcome
        deleteUncaughtExceptionLogFile();

        // call callback
        protectedCallBack(responseOnEnd, err);
    }
}


/* ===============================================
 * deleteUncaughtExceptionLogFile
 * =============================================== */
var deleteUncaughtExceptionLogFile = exports.deleteUncaughtExceptionLogFile = function ()
{
    // get the file list
    var file2Delete = getAbsoluteLogFileName();

    fs.unlink(file2Delete, function (err)
    {
        if (err)
        {
            //throw err;
            consoleDebug('error deleting UncaughtException Log File=' + file2Delete + " : " + err.message);
        }
        else
        {
            consoleDebug('successfully deleted UncaughtException Log File=' + file2Delete);
        }
    });

}


//------------------------------------------

consoleDebug("+++++++++ ti_uncaught_Exception_handler Exiting");