/*******************************************************************************
 * Copyright (c) ${year} Texas Instruments Incorporated - http://www.ti.com/
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Texas Instruments Incorporated - initial API and implementation
 *
 * Original Author:
 *     Boualem, Texas Instruments, Inc.
 *
 * Contributing Authors:
 *******************************************************************************/
var __DEBUG_MODE=false;

var consoleDefaultLevel = 'warn';
var consoleLevels ={};
var consoleJson = false;
var consoleLoggerTimestamp = false;

var UNKNOWN_SOURCE = 'unknown-source';

/* ===============================================
  * getISOTimestamp
  * =============================================== */
function getISOTimestamp() 
{
  return new Date().toISOString();
}



 /* ===============================================
  * consoleDebug
  * =============================================== */
function consoleDebug(message)
{
	if(__DEBUG_MODE)
	{
		console.log(message);
	}
}

 /* ===============================================
  * consoleLog
  * =============================================== */
function consoleLog(level, source, message)
{
	var sourceLevel;
	
	if(source in consoleLevels)
	{
		sourceLevel = consoleLevels[source];
	}
	else
	{
		sourceLevel = consoleDefaultLevel;
	}
	
	if(consoleJson)
	{
		if(consoleLoggerTimestamp)
		{
			console.log( '{"source":"' + source + '","level":"' + level +
				'","message":"' + message + '","timestamp":"' + getISOTimestamp() + '"}');
		}
		else
		{
			console.log('{"source":"' + source + '","level":"' + level +'","message":"' +
				message +'"}');
		}
	}
	else
	{
		if(consoleLoggerTimestamp)
		{
			console.log(source  + ":" + level + " - " + message + " - " + getISOTimestamp());
		}
		else
		{
			console.log(source  + ":" + level + " - " + message );
		}
	}		
}

 /* ===============================================
  * __log
  * =============================================== */
function __log(level,arg1,arg2)
{
	var sourceLevel;
	
	if(!level || !arg1)
	{	
		return;
	}
		
	if(!arg2) // log(level, message)
	{
		consoleLog(level, UNKNOWN_SOURCE, arg1);
	}
	else // log(level, source, message)
	{
		consoleLog(level,arg1, arg2);
	}

}

 /* ======================================================================
  * TILogger 
  * ====================================================================== */
 module.exports=TILogger;
 
 function TILogger(requireArg)
 {	
 	//console.log("---TILogger constructor=");
	if ( TILogger._singletonInstance )
	{
		return TILogger._singletonInstance;
	}

	var singletonLogger = {};
	TILogger._singletonInstance = singletonLogger;
	//-------------------------------------------------
	
	TILogger.error=singletonLogger.error = function(arg1, arg2)
	{
		__log('error', arg1, arg2);
	};

	TILogger.warn=singletonLogger.warn = function(arg1, arg2)
	{
		__log('warn', arg1, arg2);
	};

	TILogger.info=singletonLogger.info = function(arg1, arg2)
	{
		__log('info', arg1, arg2);
	};

	TILogger.trace=singletonLogger.trace = function(arg1, arg2)
	{
		__log('trace', arg1, arg2);
	};

	TILogger.tracefiner=singletonLogger.tracefiner = function(arg1, arg2)
	{
		__log('tracefiner', arg1, arg2);
	};

	TILogger.tracefinest=singletonLogger.tracefinest = function(arg1, arg2)
	{
		__log('tracefinest', arg1, arg2);
	};
	
	TILogger.setConfiguration=singletonLogger.setConfiguration = function(newConfiguration)
	{
		consoleDebug("---setConfiguration() newConfiguration:" + newConfiguration);
		//setConfiguration(newConfiguration, INVALID_SETCONFIGURATION_ARGUMENT);		
	};
	
	//--- for testing-------------------
	TILogger.__getWinstonLogger=singletonLogger.__getWinstonLogger = function()
	{
		//return winstonLogger;
		return null;
	};
	
    return singletonLogger;
 }
