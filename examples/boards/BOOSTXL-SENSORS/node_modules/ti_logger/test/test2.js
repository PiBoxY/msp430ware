/*******************************************************************************
 * Copyright (c) ${year} Texas Instruments Incorporated - http://www.ti.com/
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Texas Instruments Incorporated - initial API and implementation
 *
 * Original Author:
 *     Boualem, Texas Instruments, Inc.
 *
 * Contributing Authors:
 *******************************************************************************/



/* ===============================================
 * fillLog
 * =============================================== */
 var myConfig = 
{
    handleUncaughtExceptions: true,
	"fileLogger":
	{
		"logDirectory":'.',
		"logFilename":'test2.log',
		"json": false,
		"timestamp":false,
		"maxRollingFiles": 1,	
		"maxFileSize": 3145728,
		"levels": 
		{
			"defaultLevel": "tracefinest"
		}
	},
	"consoleLogger":
	{
		"levels": 
		{
			"defaultLevel": "on"
		}
	}
};

var logger = require('../lib/ti_logger.js')(myConfig);

function fillLog()
{
	myConfig.fileLogger.json=true;

	logger.error("my error messsage");
	logger.warn("my warning messsage");
	logger.info("my info messsage");
	logger.trace("my trace messsage");
	logger.tracefiner("my tracefiner messsage");
	logger.tracefinest("my tracefinest messsage");
	logger.error("source1","my error messsage");
	logger.warn("source1","my warning messsage");
	logger.info("source1","my info messsage");
	logger.trace("source1","my trace messsage");
	logger.tracefiner("source1","my tracefiner messsage");
	logger.tracefinest("source1","my tracefinest messsage");
	
	myConfig.fileLogger.json=false;
	myConfig.fileLogger.levels.defaultLevel="info";
	logger.setConfiguration(myConfig);

	
	logger.error("my error messsage");
	logger.warn("my warning messsage");
	logger.info("my info messsage");
	logger.trace("my trace messsage");
	logger.tracefiner("my tracefiner messsage");
	logger.tracefinest("my tracefinest messsage");
	logger.error("source1","my error messsage");
	logger.warn("source1","my warning messsage");
	logger.info("source1","my info messsage");
	logger.trace("source1","my trace messsage");
	logger.tracefiner("source1","my tracefiner messsage");
	logger.tracefinest("source1","my tracefinest messsage");
	throwAnException();
}	




fillLog();

function throwAnException()
{
  unknowhFunction();
}





