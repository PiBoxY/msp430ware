/*******************************************************************************
 * Copyright (c) ${year} Texas Instruments Incorporated - http://www.ti.com/
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Texas Instruments Incorporated - initial API and implementation
 *
 * Original Author:
 *     Boualem, Texas Instruments, Inc.
 *
 * Contributing Authors:
 *******************************************************************************/
var __DEBUG_MODE = false;


//----------- Import required modules-------
var tiutil = require('ti_util');
var logger = require('ti_logger')();
var fs = require('fs');
var mkdirp = require('mkdirp');
var http = require('http');
http.postCrashDump = require('./ti_proxy_http_post.js');
var dns = require('dns');
var urlModule = require('url');

//----------- Some constants/shared variables---------------
var postFileNameseparator = "__";
var POST_SITE = 'http://go-dsp.com/sdo/crashdump/upload3.php';
var CONFIRM_DIALOG_TEXT = "A crash occurred the last time you run the application\nHelp us diagnose this crash and fix it\nSend the crashDump to Texas Instruments?\n\n";
// ---- for testing only-----
var TEST_POST_SITE1 = 'http://posttestserver.com/post.php?dir=boualem';
var TEST_POST_SITE2 = 'http://localhost/sdo/crashdump/upload3.php';

var postURL = POST_SITE;

// -----------------------------------------------
// configure breakpad to use the crashDumpDirectory 
// -----------------------------------------------
var gui = global.window.nwDispatcher.requireNwGui();
gui.App.setCrashDumpDir(getCrashDumpDirectory());
consoleDebug('CrashDumpDir set to =' + getCrashDumpDirectory());


/* ======================================================================
 * TICrashHandler 							(Exported function)
 * ====================================================================== */
var TICrashHandler = function (requireArg)
{
    consoleDebug("---TICrashHandler constructor  requireArg=" + requireArg);
    if (TICrashHandler._singletonInstance)
    {
        //consoleDebug("---TICrashHandler returning old instance");
        return TICrashHandler._singletonInstance;
    }

    //consoleDebug("---TICrashHandler new instance");
    var singleton = {};

    singleton.crashDumpFilesExist = TICrashHandler.crashDumpFilesExist;
    singleton.post = TICrashHandler.post;
    singleton.getCrashDumpFileCount = TICrashHandler.getCrashDumpFileCount;
    singleton.getCrashDumpFileNames = TICrashHandler.getCrashDumpFileNames;
    singleton.getCrashDumpDirectory = TICrashHandler.getCrashDumpDirectory;
    singleton.CONFIRM_DIALOG_TEXT = TICrashHandler.CONFIRM_DIALOG_TEXT;
    singleton.confirmDialog = TICrashHandler.confirmDialog;
    singleton.crash = TICrashHandler.crash;
    singleton.deleteCrashDumpFiles = TICrashHandler.deleteCrashDumpFiles;

    TICrashHandler._singletonInstance = singleton;
    return singleton;

}; // end TICrashHandler----------------------------


/* ===============================================
 * crashDumpFilesExist
 * =============================================== */
TICrashHandler.crashDumpFilesExist = function ()
{
    return (TICrashHandler.getCrashDumpFileCount() > 0);
};

/* ===============================================
 * post
 * =============================================== */
TICrashHandler.post = function (callbackFunction)
{
    if (TICrashHandler.crashDumpFilesExist())
    {
        // get the file list
        var dumpFileList = TICrashHandler.getCrashDumpFileNames();
        consoleDebug(dumpFileList);

        // create fileInfoList
        var fileInfoList = [];
        var millisecondTime = (new Date()).getTime();
        var lastFile;
        var fileCount;
        //'darwin', 'freebsd', 'linux', 'sunos' or 'win32'
        var os = process.platform;

        for (fileCount = 0; fileCount < dumpFileList.length; fileCount++)
        {
            var paramName = "file" + fileCount;
            var filePath = TICrashHandler.getCrashDumpDirectory() + "/" + dumpFileList[fileCount];
            var postFileName = getAppName() + postFileNameseparator + getAppVersion() + postFileNameseparator + os + postFileNameseparator + millisecondTime + postFileNameseparator + dumpFileList[fileCount];
            fileInfoList[fileCount] = {
                param: paramName,
                name: postFileName,
                path: filePath
            };
        }

        // ------ add the last file again--------------------------------------
        fileInfoList[fileCount] = {
            param: "file" + fileCount,
            name: "dummy.txt",
            path: TICrashHandler.getCrashDumpDirectory() + "/" + dumpFileList[fileCount - 1]
        };
        //-------end of add the last file again--------------------------------

        consoleDebug(fileInfoList);
        consoleDebug("callbackFunction=" + callbackFunction);

        // Post them
        postCrashDumpFiles(fileInfoList, callbackFunction);
    }
    else
    {
        protectedCallBack(callbackFunction);
    }
};

/* ===============================================
 * CONFIRM_DIALOG_TEXT
 * =============================================== */
TICrashHandler.CONFIRM_DIALOG_TEXT = CONFIRM_DIALOG_TEXT;


/* ===============================================
 * confirmDialog
 * =============================================== */
TICrashHandler.confirmDialog = function ()
{
    return window.confirm(CONFIRM_DIALOG_TEXT);
};


/* ===============================================
 * getCrashDumpFileCount
 * =============================================== */
TICrashHandler.getCrashDumpFileCount = function ()
{
    return TICrashHandler.getCrashDumpFileNames().length;
}

/* ===============================================
 * getCrashDumpFileNames
 * =============================================== */
TICrashHandler.getCrashDumpFileNames = function ()
{
    var files = fs.readdirSync(getCrashDumpDirectory());

    return files;
}

/* ===============================================
 * crash 			//for testing only
 * =============================================== */
TICrashHandler.crash = function ()
{
    gui.App.crashBrowser();
}

/* ===============================================
 * getCrashDumpDirectory
 * =============================================== */
var crashDumpDirectory;

function getCrashDumpDirectory()
{
    if (!crashDumpDirectory)
    {
        // -----------------------------------------------
        // compute the crashDumpDirectory and 
        // create it if it doesn't exist
        // -----------------------------------------------
        var reg = /\\/g;
        console.log("getCrashDumpDirectory");
        var appName = getAppName();
        crashDumpDirectory = tiutil.getConfigFileDir().replace(reg, "/") + appName + "/crashdump";

        if (!fs.existsSync(crashDumpDirectory))
        {
            mkdirp.sync(crashDumpDirectory);
        }
    }

    return crashDumpDirectory;
}

TICrashHandler.getCrashDumpDirectory = getCrashDumpDirectory;

module.exports = TICrashHandler;



/* ===============================================
 * postCrashDumpFiles
 * =============================================== */
function postCrashDumpFiles(fileInfoList, callbackFunction)
{
    // post the file to TI----
    try
    {
        var newCallbackFunction;

        if (typeof (callbackFunction) != 'function')
        {
            newCallbackFunction = function ()
            {
                TICrashHandler.deleteCrashDumpFiles();
            };
        }
        else
        {
            newCallbackFunction = function (res)
            {
                //delete files regardless of outcome
                TICrashHandler.deleteCrashDumpFiles();

                consoleDebug(res);
                //consoleDebug(res.headers);

                //TODO: set error in callbackFunction based on response
                if (tiutil.isError(res))
                {
                    protectedCallBack(callbackFunction, res);
                }
                else
                {
                    if (res.statusCode == 500)
                    {
                        var err = new Error("A server error occured that may affect one or more uploaded files");
                        protectedCallBack(callbackFunction, err);
                    }
                    else
                    {
                        logger.info("successful HTTP-POST for crash dumpfiles");
                        protectedCallBack(callbackFunction);
                    }
                }
            };
        }

        var options;
        consoleDebug("about to post to: " + postURL);
        // compute options------------------ Start--------------
        var proxied;
        if (process.versions['node-webkit'])
        {
            var gui = global.window.nwDispatcher.requireNwGui();
            proxied = gui.App.getProxyForURL(postURL);

            var options;
            if (proxied == 'DIRECT')
            {
                consoleDebug("nw App: DIRECT post");
                if (isString(postURL))
                {
                    options = urlModule.parse(postURL);
                    http.postCrashDump(options, null, fileInfoList, newCallbackFunction);
                }
            }
            else
            {
                consoleDebug("nw App: Proxied post");
                // remove the leading characters 'PROXY '
                var proxyURL = proxied.replace('PROXY ', 'http://');

                var proxyOptions = urlModule.parse(proxyURL);
                var proxyHostName = proxyOptions.hostname;

                // lookup the IP Address of the proxy
                dns.lookup(proxyHostName, function (error, ipAddress4Proxy)
                {
                    //logger.info
                    consoleDebug("ipAddress4Proxy=" + ipAddress4Proxy);
                    consoleDebug("error=" + error);

                    if (!error || error == null)
                    {

                        options = {
                            host: ipAddress4Proxy, // proxy IP
                            port: proxyOptions.port, // proxy port
                            path: postURL, // use the URL as path
                            protocol: "http:",
                        };

                        http.postCrashDump(options, null, fileInfoList, newCallbackFunction);
                    }
                });

            }
            consoleDebug("Proxied URL=" + proxied);
        }
        else
        {
            //var proxy1 = process.env.http_proxy;
            //consoleDebug("process.env.http_proxy=" + proxy1);

            // we assume no proxy since it's a node app
            consoleDebug("node app: DIRECT post");
            if (isString(postURL))
            {
                options = urlModule.parse(postURL);
                http.postCrashDump(options, null, fileInfoList, newCallbackFunction)
            }
        }
    }
    catch (err)
    {
        consoleDebug("Exception when posting=" + err.message);
        logger.error("Exception when posting=" + err.message);
        //delete files regardless of outcome
        TICrashHandler.deleteCrashDumpFiles();

        // call callback
        protectedCallBack(newCallbackFunction, err);
    }
}


/* ===============================================
 * getAppName
 * =============================================== */
var appName;

function getAppName()
{
    if (!appName)
    {
        appName = tiutil.getAppName();
        if (!appName)
        {
            appName = "unknown";
        }
    }
    console.log("after appName=" + appName);
    return appName;
}

/* ===============================================
 * getAppVersion
 * =============================================== */
var appVersion;

function getAppVersion()
{
    if (!appVersion)
    {
        appVersion = tiutil.getAppVersion();
        if (!appVersion)
        {
            appVersion = "unknown";
        }
    }
    return appVersion;
}

/* ===============================================
 * deleteCrashDumpFiles
 * =============================================== */
TICrashHandler.deleteCrashDumpFiles = function ()
{
    // get the file list
    var dumpFileList = TICrashHandler.getCrashDumpFileNames();

    for (var i = 0; i < dumpFileList.length; i++)
    {
        var filePath = TICrashHandler.getCrashDumpDirectory() + "/" + dumpFileList[i];

        (function (e)
        {
            var filename = filePath;
            fs.unlink(filename, function (err)
            {
                if (err)
                {
                    //throw err;
                    logger.error('error deleting dumpfile=' + filename + " : " + err.message);
                }
                else
                {
                    logger.info('successfully deleted crash dumpfile=' + filename);
                }
            });
        })(filePath);
    }
}

/* ===============================================
 * consoleDebug
 * =============================================== */
function consoleDebug(message)
{
    if (__DEBUG_MODE)
    {
        console.log(message);
    }
}


/* ===============================================
 * protectedCallBack
 * =============================================== */
function protectedCallBack(callback, data)
{
    if (tiutil.isFunction(callback))
    {
        try
        {
            if (data)
            {
                callback(data);
            }
            else
            {
                callback();
            }
        }
        catch (err)
        {
            //nop
        }
    }
}

/* ===============================================
 * isInternetConnected
 * =============================================== */
function isInternetConnected()
{
    dns.resolve('www.google.com', function (err)
    {
        if (err)
        {
            consoleDebug("no internet connectivity");
            logger.info("no internet connectivity");
        }
        else
        {
            consoleDebug("Internet connectivity");
        }
    });
}

/* ===============================================
 * fillOptions
 * =============================================== */
function fillOptions(options)
{
    consoleDebug("length=" + length);
    //length = length *2;
    options.headers = {
        'Content-Type': contentType,
        'Content-Length': length
    };
    options.method = 'POST';
    consoleDebug(options);
}