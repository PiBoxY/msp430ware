/*******************************************************************************
 * Copyright (c) ${year} Texas Instruments Incorporated - http://www.ti.com/
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Texas Instruments Incorporated - initial API and implementation
 *
 * Original Author:
 *     Boualem, Texas Instruments, Inc.
 *
 * Contributing Authors:
 *
 *******************************************************************************/

var __DEBUG_MODE = false;
var fs = require('fs');
var endl = "\r\n";
var length = 0;
var contentType = '';
var writeBuffer = [];



/* ===============================================
 * POST method
 * =============================================== */
module.exports = function (options, data, files, callbackFunction)
{
    if (typeof (options) == 'string')
    {
        var options = require('url').parse(options);
    }


    // If we have files, we have to chose multipart, otherweise we just stringify the query 
    if (files.length)
    {
        var boundary = '-----np' + Math.random();

        for (var dataElement in data)
        {
            writeBuffer.push('--' + boundary + endl);
            writeBuffer.push('Content-Disposition: form-data; name="' + +'"' + endl);
            writeBuffer.push(endl);
            writeBuffer.push(data[dataElement] + endl);
        }

        var name = '',
            stats;
        for (var k in files)
        {
            if (fs.existsSync(files[k].path))
            {
                // Determine the name
                name = (typeof (files[k].name) == 'string') ? files[k].name : files[k].path.replace(/\\/g, '/').replace(/.*\//, '');

                // store it
                stats = fs.statSync(files[k].path);
                files[k].length = stats.size;

                writeBuffer.push('--' + boundary + endl);
                writeBuffer.push('Content-Disposition: form-data; name="' + files[k].param + '"; filename="' + name + '"' + endl);
                //writeBuffer.push('Content-Type: image/png');
                writeBuffer.push(endl);
                writeBuffer.push(files[k]);
            }
        }

        // The final multipart terminator
        writeBuffer.push('--' + boundary + '--' + endl);

        // compute the size
        for (var k in writeBuffer)
        {
            length += writeBuffer[k].length;
        }

        contentType = 'multipart/form-data; boundary=' + boundary;
    }
    else
    {
        data = require('querystring').stringify(data);

        length = data.length;
        contentType = 'application/x-www-form-urlencoded';
    }

    options.method = 'POST';
    options.headers = {
        'Content-Type': contentType,
        'Content-Length': length
    };

    try
    {

        var request = require('http').request(options, function (response)
        {
            consoleDebug("------response received");
            //-------------------------------------------------------------------
            response.on('data', function (receivedData)
            {
                consoleDebug('response: ' + receivedData);

                if (receivedData && receivedData.toString().indexOf("uploaded 1 file") < 0)
                {
                    // no file has been uploaded
                    callbackFunction(new Error("The file upload failed:  " + receivedData.toString()));
                }
            });
            //------------------------------------------------------------------
            callbackFunction(response);
        });

        //--------------------------------------
        request.on('error', function (receivedError)
        {
            consoleDebug("executePostRequestrequest.on('error',f(receivedError)): problem with request: " + receivedError.message);
            callbackFunction(receivedError);
        });

        //----------------------------------
        if (files.length)
        {
            for (var k in writeBuffer)
            {
                if (typeof (writeBuffer[k]) == 'string')
                {
                    request.write(writeBuffer[k]);
                }
                else
                {
                    // read file content
                    request.write(fs.readFileSync(writeBuffer[k].path, 'binary'));
                    request.write(endl);
                }
            }
        }
        else
        {
            request.write(data);
        }
        request.end();
    }
    catch (err)
    {
        consoleDebug(err);
    }
}

/* ===============================================
 * consoleDebug
 * =============================================== */
function consoleDebug(message)
{
    if (__DEBUG_MODE)
    {
        console.log(message);
    }
}