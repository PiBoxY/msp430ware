'use strict';
var chai = require('chai');
var expect = chai.expect;  // See http://chaijs.com/api/bdd/ for examples of expect syntax 
var fsutil;
if (process.platform === 'darwin') {
  fsutil = require('../bin/mac_test/ti_fsutil');
} else {
  if (process.platform === 'win32') {
    fsutil = require('../bin/win32_test/ti_fsutil');
  } else {
    fsutil = require('../bin/linux32_test/ti_fsutil');
  }
}

/*
 *  ======== dbgPrint ========
 */
var isEnableDebugPrintf = false;
function dbgPrint(str)
{
	if (isEnableDebugPrintf) {
		console.log(str);
	}
}





describe('require', function()
{
	it('ti_fsutil should be an object', function()
	{
	  expect(fsutil).to.not.be.undefined;
	  expect(fsutil).not.to.be.null;
	});
});

describe('load fsutil.dll', function()
{

	it('should return 0 when loading the DLL', function()
	{
		fsutil.setAppNameTag('test');
		fsutil.setPathToDll('lib\\win32\\fsutil.dll');
		var retCode = fsutil.getErrorFromLoadLibrary();
		if (process.platform !== 'win32') {
			expect(retCode).to.equal(-1);
		} else {
		    expect(retCode).to.equal(0);
		}
	});
});

if (process.platform === 'win32') {
describe('ti-fsutil directories', function()
{

  
  describe('getGlobalDir', function()
  {
    it('should return the global directory', function(done)
	{

		var globalDir = fsutil.getGlobalFileDir();
		expect(globalDir).to.not.be.undefined;
		expect(globalDir).to.not.be.empty;
		expect(globalDir).to.contain('TEXAS');
		done();
    });
  });
  describe('getSharedTemporaryFileDir', function()
  {
    it('should return the shared temporary directory', function(done)
	{

		var sharedTempDir = fsutil.getSharedTemporaryFileDir();
		expect(sharedTempDir).to.not.be.undefined;
		expect(sharedTempDir).to.not.be.empty;
		expect(sharedTempDir.toUpperCase()).to.contain('LOCAL');
		done();
    });
  });
  
  describe('getTemporaryFileDir', function()
  {
    it('should return the temporary directory', function(done)
	{

		var tempDir = fsutil.getTemporaryFileDir();
		expect(tempDir).to.not.be.undefined;
		expect(tempDir).to.not.be.empty;
		expect(tempDir.toUpperCase()).to.contain('LOCAL');
		done();
    });
  });
  
  describe('getConfigFileDir', function()
  {
    it('should return the config file directory', function(done)
	{

		var configFileDir = fsutil.getConfigFileDir();
		expect(configFileDir).to.not.be.undefined;
		expect(configFileDir).to.not.be.empty;
		expect(configFileDir).to.contain('ti');
		done();
    });
  });
    describe('getDumpFileDir', function()
  {
    it('should return the dump file directory', function(done)
	{

		var dumpFileDir = fsutil.getDumpFileDir();
		expect(dumpFileDir).to.not.be.undefined;
		expect(dumpFileDir).to.not.be.empty;
		expect(dumpFileDir.toUpperCase()).to.contain('LOCAL');
		done();
    });
  });

  
  describe('getShortPathName', function()
  {
      it('should return the 8.3 name for the global directory', function(done)
	  {
		var globalDirLongName = 'C:\\ProgramData\\Texas Instruments\\CCS';
		var shortDirName = fsutil.getShortPathName(globalDirLongName);
		expect(shortDirName).to.not.be.undefined;
		expect(shortDirName).to.not.be.empty;
		dbgPrint("\nshortDirName = "+shortDirName+", from "+globalDirLongName);
		expect(shortDirName).to.equal(fsutil.getGlobalFileDir());
		done();
	  });
  });  


}); 
}
