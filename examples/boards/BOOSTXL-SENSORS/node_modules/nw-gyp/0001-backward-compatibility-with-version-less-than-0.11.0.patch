From a63757aedb5b730eedcbdd8386d38de2dcae0e1a Mon Sep 17 00:00:00 2001
From: Roger <wenrui@gmail.com>
Date: Wed, 29 Oct 2014 19:51:09 +0800
Subject: [PATCH] backward compatibility with version less than 0.11.0-rc1

---
 lib/configure.js | 18 +++++++++++++++++-
 lib/install.js   | 48 +++++++++++++++++++++++++-----------------------
 2 files changed, 42 insertions(+), 24 deletions(-)

diff --git a/lib/configure.js b/lib/configure.js
index ba8346d..1691a29 100644
--- a/lib/configure.js
+++ b/lib/configure.js
@@ -201,7 +201,23 @@ function configure (gyp, argv, callback) {
     }
 
     // set the target_arch variable
-    variables.target_arch = gyp.opts.arch || process.arch || 'ia32'
+    var isLegacy = false;
+    if (gyp.opts.target) {
+      // if --target was given, then determine a target version to compile for
+      var versionStr = gyp.opts.target;
+      isLegacy = semver.lt(versionStr, '0.11.0-rc1');
+    }
+
+    if (isLegacy && (process.platform == 'win32' || process.platform == 'darwin')) {
+      variables.target_arch = gyp.opts.arch || 'ia32';
+    } else
+      variables.target_arch = gyp.opts.arch || process.arch || 'ia32';
+
+    if (isLegacy && win) {
+      if (variables.target_arch != 'ia32') {
+        callback(new Error('Only 32bit libraries can be built on windows'))
+      }
+    }
 
     // set the node development directory
     variables.nodedir = nodeDir
diff --git a/lib/install.js b/lib/install.js
index 85ea8ed..f6243fb 100644
--- a/lib/install.js
+++ b/lib/install.js
@@ -51,8 +51,8 @@ function install (gyp, argv, callback) {
     return callback(new Error('Invalid version number: ' + versionStr))
   }
 
-  // "legacy" versions are < 0.3.2
-  var isLegacy = semver.lt(versionStr, '0.3.2')
+  // "legacy" versions are < 0.11.0-rc1
+  var isLegacy = semver.lt(versionStr, '0.11.0-rc1')
   log.verbose('installing legacy version?', isLegacy)
 
   if (semver.lt(versionStr, '0.3.2')) {
@@ -283,7 +283,7 @@ function install (gyp, argv, callback) {
         log.verbose('`nw.lib` 32-bit url', nodeLibUrl32)
         log.verbose('`nw.lib` 64-bit url', nodeLibUrl64)
 
-        var async = 2
+        var async = isLegacy ? 1 : 2;
         mkdir(dir32, function (err) {
           if (err) return done(err)
           log.verbose('streaming 32-bit nw.lib to:', nodeLibPath32)
@@ -305,27 +305,29 @@ function install (gyp, argv, callback) {
             --async || done()
           })
         })
-        mkdir(dir64, function (err) {
-          if (err) return done(err)
-          log.verbose('streaming 64-bit nw.lib to:', nodeLibPath64)
-
-          var req = download(nodeLibUrl64)
-          if (!req) return
-          req.on('error', done)
-          req.on('response', function (res) {
-            if (res.statusCode !== 200) {
-              done(new Error(res.statusCode + ' status code downloading 64-bit nw.lib'))
-              return
-            }
-
-            var ws = fs.createWriteStream(nodeLibPath64)
-            ws.on('error', cb)
-            req.pipe(ws)
+        if (!isLegacy) {
+          mkdir(dir64, function (err) {
+            if (err) return done(err)
+            log.verbose('streaming 64-bit nw.lib to:', nodeLibPath64)
+
+            var req = download(nodeLibUrl64)
+            if (!req) return
+            req.on('error', done)
+            req.on('response', function (res) {
+              if (res.statusCode !== 200) {
+                done(new Error(res.statusCode + ' status code downloading 64-bit nw.lib'))
+                return
+              }
+
+              var ws = fs.createWriteStream(nodeLibPath64)
+              ws.on('error', cb)
+              req.pipe(ws)
+            })
+            req.on('end', function () {
+              --async || done()
+            })
           })
-          req.on('end', function () {
-            --async || done()
-          })
-        })
+        } // isLegacy
       } // downloadNodeLib()
 
     }) // mkdir()
-- 
2.1.0

